#!/usr/bin/env bash

THIS_FILE="$0"

RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;80;250;100m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

PKG_MANAGER=

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            [[ -z "${QUIET}" ]] && printf "%b\n" "[${GREEN}*${NC}]: $@"
            ;;
        warn)
            printf "%b\n" "[${WARN}^${NC}]: $@"
            ;;
        error)
            printf "%b\n" "[${RED}!${NC}]: $@"
            ;;
    esac
}; alias Log="LOG"; alias L="LOG"

function ColorPath() {
    echo "$( sed "s@${HOME}@${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}@g" <(printf "%s\n" "${1}") )"
}

if [[ -n ${ZSH_VERSION} ]]; then
    unsetopt EXTENDED_HISTORY
    unsetopt extendedhistory
fi

### Global variables
export HOSTNAME="$(cat /etc/hostname)"
export LANG=en_US.UTF-8
export WINEPREFIX="${HOME}/wine"
export HISTFILE="/tmp/histfile"
export EDITOR="nvim"
export BREW="/home/linuxbrew/.linuxbrew"
export PATH="/usr/bin"

### Necessary Aliases
alias ip="ip --color=auto"
alias LS="eza --color=always --icons=always --octal-permissions --binary --across"
alias l="eza --long --color=always --icons=always --group --octal-permissions --binary --across --sort=created --reverse"
alias LA="eza --color=always --icons=always --group --octal-permissions --binary --across --almost-all"
alias LL="eza --long --color=always --icons=always --sort=created --group --long --header --classify=always --octal-permissions --binary --across --total-size"
alias lll="eza --long --color=always --icons=always --group --numeric --long --header --classify=always --octal-permissions --binary --across --total-size"
alias ls="lsd --color=always --git --icon=always --group-dirs=first --classify 2> /dev/null"
alias ll="lsd --long --color=always --git --icon=always --group-dirs=first --classify --permission octal --total-size 2> /dev/null"
alias la="lsd --color=always --git --all --icon=always --group-dirs=first --classify --permission octal --total-size 2> /dev/null"
alias mv="mv --verbose"
alias diff="diff --color=auto"
alias cp="LOG error '${RED}Use rsync MF${NC}'; return 1 &> /dev/null"
alias grep="grep --color=always"
alias dir="dir --color=always"
alias ncdu="ncdu --color dark"
alias qemu="qemu-system-x86_64"
alias sway="env WLR_RENDERER=vulkan sway &> /tmp/sway.log"
alias VimBeGood="clear; docker run -it --rm brandoncc/vim-be-good:stable && echo && clear"
alias sourceme="source ~/.zshrc.pre-oh-my-zsh"
alias zshrc="vim ~/.zshrc"
alias vimrc="vim ~/.vimrc"
alias nvimrc="nvim ~/.config/nvim/init.vim"
alias gtypistH="gtypist --personal-best --max-error=1.8 --no-welcome-screen --term-cursor --word-processor --always-sure"
alias useless_pkg="pacman -Qtdq"
alias cleancache="(paru -Scc || yay -Scc ) && sudo pacman -Scc"
alias clearcache="(paru -Scc || yay -Scc ) && sudo pacman -Scc"
alias weather="curl wttr.in/24.5800,80.8369"
alias nvtop="nvtop --delay 2"
alias gs="git status"
alias Fonts="fc-list | awk -F':' '{print $1}' | awk -F'/' '{print $6}' | awk -F'.' '{print $1}' | sort -u"
alias swayconfig="${EDITOR} ${HOME}/.config/sway/config"
alias waybarconfig="nvim ${HOME}/.config/waybar/"
alias NULL="/dev/null"
alias M="${HOME}/Music"
alias n="nvim"
alias v="vim"
alias colorchoser="exec env QT_QPA_PLATFORMTHEME=qt6ct kcolorchooser 2> /dev/null &; disown ; exit"
alias getcolors="exec env QT_QPA_PLATFORMTHEME=qt6ct kcolorchooser 2> /dev/null &; disown"
alias mpv="mpv --vid=auto --vo=gpu-next --hwdec=vulkan --hdr-compute-peak --volume=64"
alias Vireon="cd ${HOME}/DEV/VIreon && ssh-add ${HOME}/.ssh/id_ed25519_rustlog"
alias radeontop="radeontop --color"
alias exiftool="/usr/bin/vendor_perl/exiftool"
alias metadata="/usr/bin/vendor_perl/exiftool"
alias lsblk="lsblk --paths -o+SIZE --fs"
alias Cat="/usr/bin/bat --theme-dark=TwoDark --color=always --paging=always --decorations=never"

### Random aliasing
alias сдуфк="clear"
alias ды="ls"

### Flatpak Applications
alias fp-scrivano="flatpak run com.github.scrivanolabs.scrivano"
alias fp-draw="flatpak run com.github.scrivanolabs.scrivano"
alias fp-tipp10="flatpak run com.gitlab.tipp10.tipp10"
alias fp-ktouch="flatpak run org.kde.ktouch"
alias fp-typing="flatpak run org.kde.ktouch"
alias fp-easyeffects="flatpak run com.github.wwmm.easyeffects"
alias fp-effects="flatpak run com.github.wwmm.easyeffects"
alias fp-zen="flatpak run app.zen_browser.zen"
alias fp-pomodoro="flatpak run org.jousse.vincent.Pomodorolm"
alias fp-pomodorolm="flatpak run org.jousse.vincent.Pomodorolm"
alias fp-discord="flatpak run com.discordapp.Discord"
alias fp-VideoEditor="flatpak run org.kde.kdenlive 2> /dev/null"
alias fp-calculator="flatpak run io.github.Qalculate.qalculate-qt"
alias fp-qcal="flatpak run io.github.Qalculate.qalculate-qt"
alias fp-systemmonitor="XDG_CURRENT_DESKTOP=KDE GTK_THEME=Adwaita:dark QT_QPA_PLATFORMTHEME=gtk plasma-systemmonitor"

### Determine package manager
function PackageManager() {
    local -a pkg_m_Arr=()
    pkg_m_Arr=(pacman apt yum dnf yay)

    for pkg_m in "${pkg_m_Arr[@]}"; do
        if command -v "${pkg_m}" &> /dev/null; then
            PKG_MANAGER="${pkg_m}"
            [[ -z "$1" ]] && LOG info "You PackageManager is: ${pkg_m}"
            return 0
        fi
    done
}; alias pkg="PackageManager"; alias my_pkg_m="PackageManager"
alias my_package_manager="PackageManager"; alias my-package-manager="PackageManager"

### Just check basic utilities in system
function RequiredTools() {
    ## Get PackageManager
    [[ -z $1 ]] && LOG info "Most basic tools"
    PackageManager NULL
    local -a TOOL_ARR=()
    TOOL_ARR=(
        # Shells
        zsh fish
        # Editors
        nvim vim micro nano
        # Version control
        git
        # Networking
        curl rsync nmcli wget ssh traceroute dig
        # Compression
        gzip bzip2 xz zip
        # Container
        docker
        # filemanager
        yazi ranger
        # Build tools
        make cmake gcc clang
        # Scripting languages
        python ruby node npm php
        # Productivity
        htop btop tmux figlet cowsay tree jq fzf bat lsd eza rg unzip zip
        # Compilers
        gcc clang gdb make cmake rustc
        # Media/ TUI visulas
        cava mpv imv feh pastel
        # Others
        jq lsd fzf bat eza rg yt-dlp rclone jq
        # DevOps & security extras (optional)
        kubectl ansible nmap john aircrack-ng
    )

    for binary in "${TOOL_ARR[@]}"; do
        if command -v "${binary}" &> /dev/null; then
            [[ -z $1 ]] && LOG info "Found '${BLUE}${binary}${NC}' in path: $(whereis ${binary} | cut -d' ' -f2)"
        else
            LOG error "'${BLUE}${binary}${NC}' Not Found. Install it using '$PKG_MANAGER'"
        fi
    done
    return 0
}; alias goodies="RequiredTools"; alias availabletools="RequiredTools"
alias mytools="RequiredTools"; alias tools="RequiredTools"

function RotTransform() {
    local operation_type="$1"
    local type_="$2"
    local Input="$3"
    local save_path="$4"
    local -a Enc=('tr' 'A-Za-z' 'N-ZA-Mn-za-m')
    local -a Dec=('tr' 'N-ZA-Mn-za-m' 'A-Za-z')
    local -a operation=()

    [[ -z "${Input}" ]] && {
        LOG error "Input '${Input}' is empty"
            return 1
        }

    if [[ "${operation_type}" == "encode" ]]; then
        operation=("${Enc[@]}")
    else
        operation=("${Dec[@]}")
    fi

    [[ -d "${Input}" ]] && {
        LOG error "Cannot use directories"
            return 1
        }
    if [[ -n "${save_path}" && -f  "${save_path}" ]]; then
        save_path="${save_path}"
    else
        unset save_path
    fi

    if [[ "${type_}" == "text" ]]; then
        [[ -z "${save_path}" ]] && ${operation[@]} <<< "${Input}" || \
            ${operation[@]} <<< "${Input}" > "${save_path}"
    else
        [[ -z "${save_path}" ]] && ${operation[@]} < "${Input}" || \
            ${operation[@]} < "${Input}" > "${save_path}"
    fi
}

### Rotate text by 13
function rot13() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local -a ARGS=("$@")
    local argc=${#ARGS[@]}
    local operation=
    local save_path=
    local input=
    local arg=
    local next_arg=

    if [[ $# -lt 1 ]]; then
        LOG error "At least one arguments expected"
        LOG info "rot13 <encode/decode> <file/string>"
        return 1
    fi

    for (( i=0 ; i < argc; i++ )); do
        arg="${ARGS[$i]}"
        case "${arg}" in
            -s|-save|--save)
                save_path="${ARGS[$(($i+1))]}"
                i=$((i+1))
                [[ -z "${save_path}" || ! -f "${save_path}" ]] && {
                    LOG error "Not a valid path: '${save_path}'"
                }
            ;;
        -s=*|-save=*|--save=*)
            save_path="${arg#*=}"
            [[ -z "${save_path}" || ! -f "${save_path}" ]] && {
                LOG error "Not a valid path: '${save_path}'"
            }
            ;;
        -e|-encode|--encode|encode|enc)
            operation="encode"
            ;;
        -d|-decode|--decode|decode|dec)
            operation="decode"
            ;;
        *)
            if [[ -n "${arg}" ]]; then
                [[ -z "${input}" ]] && input="${arg}" || {
                    LOG warn "Two inputs, Ignoring ${arg}"
                }
            fi
            ;;
        esac
    done

    [[ -z "${input}" ]] && {
        LOG error "Input '${input}' is empty"
        return 1
    }

    [[ -n "${save_path}" ]] && {
        printf "%s: " "Create this file? (y)es|(n)o"
        read -r YES
        [[ "${YES}" =~ ^(Yes|yes|y)$ ]] && touch "${save_path}"
    }

    if [[ ! -f "${input}" ]]; then
        # RotTransform encode|decode InputType Input FilePath
        RotTransform "${operation}" "text" "${input}" "${save_path}"
    else
        # RotTransform encode|decode InputType Input FilePath
        RotTransform "${operation:-"encode"}" "file" "${input}" "${save_path}"
    fi
}

### Fetch defined https_proxy and https_proxy variable to current shell environment
function Tor_proxy() {
    u_set="${1:-"NULL"}"
    if [[ $u_set =~ ^(u|unset|uset)$ ]]; then
        unset http_proxy
        unset https_proxy
        exit 0
    fi
    export http_proxy="socks5://127.0.0.1:9050"
    export https_proxy="socks5://127.0.0.1:9050"
}

### Extract a tar archive
function Extract() {
    local archive="$1"
    case ${archive} in
        *.tar)
            tar --extract --verbose --file="${archive}"
            ;;
        *.tar.gz)
            tar --extract --gzip --verbose --file="${archive}"
            ;;
        *.tar.xz)
            tar --extract --xz --verbose --file="${archive}"
            ;;
        *.tar.bzip2)
            tar --extract --bzip2 --verbose --file="${archive}"
            ;;
        *)
            LOG error "'${archive}' is not tar archieve"
            ;;
    esac
}

### Mount a remote to local mount point
function RcloneMount() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    RequiredTools 0
    local -a ARGS=("$@") matches=()
    local action="${ARGS[0]}" drive="${ARGS[1]}" mountPoint="${ARGS[2]}"
    local list=0 mount=0 umount=0 show_size=0
    local -a matches=()

    [[ $# -eq 0 ]] && {
        LOG error "At least one arguemnt expected"
            LOG info "$0 <show-size|list|mount|umount> drive"
            return 1
        }

    if [[ -n "$action" ]]; then
        case "$action" in
            l|-l|-list|--list|list) list=1 ;;
            s|-s|-show|--show|--show-size|a|about) show_size=1 ;;
            m|-m|-mount|--mount|mount) mount=1 ;;
            u|-u|-umount|--umount|umount) umount=1 ;;
            *) LOG error "Unknown action '${BROWN}$action${NC}'"; return 1 ;;
        esac
    fi

    if [[ -n "$drive" ]]; then
        [[ -n "${drive#*=}" ]] && {
            drive="${drive#*=}"
        }
    [[ -n $BASH_VERSION ]] && mapfile -t matches < <(rclone listremotes | grep --color=never -i "${drive}")
    [[ -n $ZSH_VERSION ]] && {
        matches=("$(rclone listremotes | grep --color=never -i ${drive})")
    }

    if [[ ${#matches[@]} -eq 1 ]]; then
        drive=${matches[0]}
    elif [[ ${#matches[@]} -gt 1 ]]; then
        LOG error "Ambiguous drive name: multiple remotes: '${matches[*]}'"
        printf "Full Name of the remote: "
        read -r REMOTE
        drive="${REMOTE}"
    else
        LOG error "No remotes found"
        return 1
    fi

    [[ "${drive}" != *: ]] && drive+=:
    [[ -z "${drive}" ]] && {
        LOG error "No remotes. Exiting"
        return 1
    }
    LOG info "Remote: ${drive}"
        fi

        if [[ -n "${mountPoint}" ]]; then
            [[ -n "${mountPoint#*=}" ]] && {
                mountPoint="${mountPoint#*=}"
            }
        mkdir -p "${mountPoint}"
        [[ -d "${mountPoint}" ]] || LOG warn "Mount point '${mountPoint}' does not exist"
        fi

        [[ $list -eq 1 ]] && {
            rclone listremotes
        }

    if [[ -z "${drive}" && $listremotes -eq 0 ]]; then
        LOG error "Remote is empty"
        return 1
    fi

    [[ $mount -eq 1 && $umount -eq 1 ]] && {
        LOG warn "--mount and --umount cannot be together"
        return 1
    }

    [[ $show_size -eq 1 ]] && {
        rclone about ${drive}
    }

    if [[ $umount -eq 1 ]]; then
        [[ -z ${mountPoint} ]] && mountPoint=$(grep --color=never "${drive}" /proc/mounts | cut -d' ' -f2)
        if [[ -d "${mountPoint}" ]]; then
            fusermount -uz "${mountPoint}" || echo "Cannot remove '${DIR}'"
            rm -rf "${mountPoint}" && \
                echo -e "Cleaned '$(grep --color=always "${drive}" /proc/mounts | cut -d' ' -f2)'"
        fi
        return 0
    fi
    if [[ $mount -eq 1 ]]; then
        mountPoint="${mountPoint:="/tmp/defaultRemoteMount"}"
        [[ ! -d "${mountPoint}" ]] && mkdir -p "${mountPoint}"
        if rclone mount "${drive}":/ "${mountPoint}" --daemon; then
            grep "${mountPoint}" --color=always /proc/mounts
        fi
    fi
    return 0
}

### Suppliment function for compilation functions
function _compileExitHandler() {
    local exit_code="$1"
    shift
    local no_ext_filename="$1"
    shift
    local RM=0
    local -a total_files=()
    [[ $exit_code -gt 0 ]] && {
        LOG error "${RED}Compilation Failed${NC}"
            LOG error "Program exited with code : $exit_code"
            # Just return if compilation is failed
            return 1
        }
    for arg in "$@"; do
        if [[ "${arg}" == -* ]]; then
            [[ "${arg}" =~ ^(--rm|--remove|-rm|-r)$ ]] && RM=1
        else
            total_files+=("${arg}")
        fi
    done

    "${no_ext_filename}" "${total_files[@]}" # Run the compiled binary

    if [[ $RM -eq 1 ]]; then
        if rm -f "${no_ext_filename}"; then
            LOG info "Cleaned: ${no_ext_filename}"
        else
            LOG error "Failed to remove: ${no_ext_filename}"
        fi
    fi
}

### GUI develeopment (Debuging enabled)
function GUI_BUILD_DEBUG() {
    local FILE="$(realpath $1)"
    local NO_EXT_FILENAME="${FILE%.*}"
    shift
    [[ -f "$FILE" ]] && gcc -std=c++20 -Wall -Wextra -Werror -Wconversion \
        -Wshadow -pedantic -O0 -fno-inline -lstdc++ -lglfw -lGL -lglad -lm \
        "${FILE}" -o "${NO_EXT_FILENAME}" && "${NO_EXT_FILENAME}"
    "${NO_EXT_FILENAME}"
    _compileExitHandler $? "${NO_EXT_FILENAME}" "$@"
}

### GUI develeopment (release mode)
function GUI_BUILD_RELEASE() {
    local FILE="$(realpath $1)"
    local NO_EXT_FILENAME="${FILE%.*}"
    shift
    [[ -f "$FILE" ]] && gcc -std=c++20 -Wall -Wextra -Wconversion -Wshadow \
        -pedantic -O3 -flto -march=native -funroll-loops -fomit-frame-pointer \
        -lstdc++ -lglfw -lGL -lglad -lm \
        "${FILE}" -o "${NO_EXT_FILENAME}" && "${NO_EXT_FILENAME}"
    "${NO_EXT_FILENAME}"
    _compileExitHandler $? "${NO_EXT_FILENAME}" "$@"
}

# Predefined compiler flags for C/C++ source units
function Compile() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local -a args=("$@")
    local -a files=()
    local -a cmd_flags=() c_sources=() cpp_sources=()
    local arg="" out_="" output="main___" CC_="gcc"
    local -i remove_output=0 debug=0

    arg=""; for ((i=0; i < ${#args[@]}; i++ )); do
        arg="${args[$i]}"
        if [[ "${arg}" == -* ]]; then
            case "${arg}" in
                -rm|--rm|--remove)
                    remove_output=1
                    ;;
                -o|--output)
                    output="${arg}"
                    ;;
                -o=*|--output=*)
                    output="${arg#*=}"
                    [[ -z "${output}" ]] && output="main___"
                    ;;
                -clang|--clang)
                    CC_="clang"
                    ;;
                -clang=*|--clang=*)
                    CC_="${arg#*=}"
                    [[ -z "${CC_}" ]] && CC_="gcc"
                    ;;
                *)
                    LOG error "Invalid flag: '${arg}'"
                    ;;
            esac
        else
            [[ -s "${arg}" && -f "${arg}" ]] && files+=( "${arg}" ) || LOG error "Not a file: '${arg}'"
        fi
    done

    arg=""; for ((i=0; i < ${#files[@]}; i++ )); do
        arg="${args[$i]}"
        case "${arg}" in
            *.[cC]++|*.[cC][pP][pP])
                cpp_sources+=( "${arg}" )
            ;;
            *.[cC])
                c_sources+=( "${arg}" )
            ;;
            *)
                LOG error "Not a valid sources file: '${arg}'"
            ;;
        esac
    done

    if [[ ${#cpp_sources[@]} > 0 ]]; then
        cmd_flags=()
        cmd_flags+=( "-x" "c++" "-std=c++20" )
        cmd_flags+=( "-lstdc++" )
        cmd_flags+=( "-pedantic" "-Wall" "-Wextra" "-Werror" )
        [[ $debug -eq 1 ]] && cmd_flags+=( "-DDEBUG" )
        cmd_flags+=( "-fno-elide-constructors" )

        LOG info "$CC_ ${cmd_flags[*]} ${cpp_sources[*]} -o ${output}"
        $CC_ "${cmd_flags[@]}" "${cpp_sources[@]}" -o "${output}"
        LOG info "Running: ${output}: "
        local lines out_
        if ! out_="$(./${output})"; then
            LOG error "Execution failed"
        fi

        if [[ -n "${ZSH_VERSION}" ]]; then
            lines=("${(f)out_}")
        else
            mapfile -t lines <<< "${out_}"
        fi

        for line in "${lines[@]}"; do
            printf "    %b\n" "${line}"
        done

        if [[ $remove_output -eq 1 ]]; then
            rm -f "${output}" && LOG info "cleaned: '${output}'"
        fi
        printf "\n"
    fi

    if [[ ${#c_sources[@]} > 0 ]]; then
        cmd_flags=()
        cmd_flags+=( "-lstdc++" )
        cmd_flags+=( "-pedantic" "-Wall" "-Wextra" "-Werror" )
        [[ $debug -eq 1 ]] && cmd_flags+=( "-DDEBUG" )

        LOG info "$CC_ ${cmd_flags[*]} ${c_sources[*]} -o ${output}"
        $CC_ "${cmd_flags[@]}" "${c_sources[@]}" -o "${output}"
        LOG info "Running: ${output}: "
        local lines out_
        if ! out_="$(./${output})"; then
            LOG error "Execution failed"
        fi

        if [[ -n "${ZSH_VERSION}" ]]; then
            lines=("${(f)out_}")
        else
            mapfile -t lines <<< "${out_}"
        fi

        for line in "${lines[@]}"; do
            printf "    %b\n" "${line}"
        done

        if [[ $remove_output -eq 1 ]]; then
            rm -f "${output}" && LOG info "cleaned: '${output}'"
        fi
        printf "\n"
    fi

}

### Lauch sway Window manager with vulkan
function sway_vulkan() {
    cd ~/
    local num=$1
    local LOG_FILE="/tmp/sway.log"
    [[ $num -eq 0 ]] && num=128
    [[ $num -eq 1 ]] && num=129
    # Tells Video Acceleration API (VA-API) to use the
    # intel / radeonsi / vdpau(legacy for Nvidia) backend for video decoding.
    export LIBVA_DRIVER_NAME=radeonsi
    # Overrides the Generic Buffer Management backend
    # GBM_BACKEND=nvidia-drm
    unset GBM_BACKEND
    # Forces GLX to use NVIDIA's implementation.
    # use mesa for intel/amd
    export __GLX_VENDOR_LIBRARY_NAME=mesa
    # Forces software rendering for cursors
    # 0 or unset
    export WLR_NO_HARDWARE_CURSORS=1
    # Tells wlroots which GPU device to use for DRM rendering
    # export WLR_DRM_DEVICES=/dev/dri/card0:/dev/dri/card1
    export WLR_DRM_DEVICES=/dev/dri/card0:/dev/dri/card1
    # Forces wlroots to use Vulkan renderer.
    # gles2 for opengl or pixman CPU only
    export WLR_RENDERER=vulkan
    export XDG_SESSION_TYPE=wayland
    export XDG_CURRENT_DESKTOP=sway
    export DESKTOP_SESSION=sway
    /usr/bin/sway &> "$LOG_FILE" && {
        LOG info "Sway was started with $WLR_DRM_DEVICES"
    } || {
        LOG error "Sway cannot start with $WLR_DRM_DEVICES"
            [[ -s "$LOG_FILE" ]] && cat "$LOG_FILE"
        }
}

### Set the path with default locations
function setPath() {
    PATH+=: PATH+="/usr/local/bin:/usr/local/sbin:/usr/sbin:/sbin:/bin"
    PATH+=: PATH+="${HOME}/.bin:${HOME}/.local/bin"
    PATH+=: PATH+="${HOME}/.cargo/bin:${HOME}/.npm_global/bin:${BREW}/bin"

    local tmp_path="/tmp/.home.path"
    if [[ ! -s "${tmp_path}" ]] ;then
        echo "$PATH" &> "${tmp_path}"
    else
        PATH="$(cat ${tmp_path})"
        export PATH
    fi
}

### Show all the paths in $PATH
function Paths() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local IFS=$':' i=0
    for path in $PATH; do
        printf '%-2s %-2s %s\n' "${i}" '->' "${path}"
        ((i++))
    done
}; alias show_path="Paths"; alias print_path="Paths"

### Start SSH agent on initial login
function SSHAgent() {
    local ssh_agent="/tmp/.ssh_agent"
    if [[ ! -s "${ssh_agent}" ]]; then
        touch "${ssh_agent}"
        echo "$(ssh-agent -s)" > "${ssh_agent}"
    else
        source ${ssh_agent} &> /dev/null
    fi
}

### Update my Arch Linux
function Update() {
    if command -v paru &> /dev/null; then
        paru --verbose --noconfirm -Syu
    elif command -v yay &> /dev/null; then
        yay --verbose --noconfirm -Syu
    else
        sudo pacman --verbose --noconfirm -Syu
    fi

    if [[ $? -eq 0 ]] && command -v brew &> /dev/null; then
        brew update -v && brew upgrade -v
    fi

    if [[ $? -eq 0 ]] && command -v flatpak &> /dev/null; then
        flatpak update -y
    fi
}

### Get randomcolors quickly
function RandomColors() {
    local format="$1"
    pastel random | pastel format "${format:-"hex"}"
}

### Set refresh rate to 144Hz
function 144hz() {
    local output="" mode=""
    local px="" hz=""
    local -i req_hz=144

    if [[ ${XDG_SESSION_TYPE} == wayland ]]; then
        output="$(wlr-randr | head -n1 | cut -d' ' -f1)"
        px=$(wlr-randr | grep --color=never current | awk -F' ' '{ print $1 }')
        hz=$(wlr-randr | grep --color=never -P "(?=.*${px})(?=.*${req_hz})" | grep --color=never -o -E "${req_hz}\.[0-9]+")
        mode="${px}px@${hz}Hz"
        wlr-randr --output ${output} --mode ${mode} && exit 0 || LOG error "Cannot set $req_hz"
    elif [[ ${XDG_SESSION_TYPE} == x11 ]]; then
        output=$(xrandr | grep --color=never 'connected primary' | cut -d' ' -f1)
        px=$(xrandr | grep --color=never '\*' | awk -F' ' '{ print $1 }')
        hz=$(xrandr | grep --color=never "${px}" | grep --color=never -Eo "${req_hz}\.[0-9]+")
        LOG info "xrandr --output ${output} --mode ${px} --rate ${hz}"
        xrandr --output "${output}" --mode "${px}" --rate "${hz}" || LOG error "Cannot set $req_hz"
    fi
}

### Set refresh rate to 60Hz
function 60hz() {
    local output="" mode=""
    local px="" hz=""
    local -i req_hz=60

    if [[ ${XDG_SESSION_TYPE} == wayland ]]; then
        output="$(wlr-randr | head -n1 | cut -d' ' -f1)"
        px=$(wlr-randr | grep --color=never current | awk -F' ' '{ print $1 }')
        hz=$(wlr-randr | grep --color=never -P "(?=.*${px})(?=.*${req_hz})" | grep --color=never -Eo "${req_hz}\.[0-9]+")
        mode="${px}px@${hz}Hz"
        wlr-randr --output ${output} --mode ${mode} && exit 0
    elif [[ ${XDG_SESSION_TYPE} == x11 ]]; then
        output=$(xrandr | grep --color=never 'connected primary' | cut -d' ' -f1)
        px=$(xrandr | grep --color=never '\*' | awk -F' ' '{ print $1 }')
        hz=$(xrandr | grep --color=never "${px}" | grep --color=never -Eo "${req_hz}\.[0-9]+")
        LOG info "xrandr --output ${output} --mode ${px} --rate ${hz}"
        xrandr --output "${output}" --mode "${px}" --rate "${hz}" || LOG error "Cannot set $req_hz"
    fi
}

### AI in terminal
function gpt() {
    local type_="$1"
    [[ $# -gt 0 ]] && shift
    local -a prompt_=("$@")
    local session_log="/tmp/.tgpt_TYPE_$(date +%F_%T).log"
    case "${type_}" in
        dev)
            AI_PROVIDER=phind tgpt --multiline --log "${session_log/TYPE/phind}"
            ;;
        img)
            local img_path="${HOME}/Pictures/tgpt/"
            mkdir -p "${img_path}"
            img_path+="tgpt_$(date +%F_%T).png"
            tgpt --img --out "${img_path}" --width 512 --height 512 "${prompt_[*]}" && \
                LOG info "Your imge: $(ColorPath "${img_path}")"
            ;;
        *)
            AI_PROVIDER=isou tgpt --multiline --log "${session_log/TYPE/pollinations}"
            ;;
    esac
}; alias devgpt='gpt dev'; alias gptimg='gpt img'

### Pretty cat with colors
function catbat() {
    local -a args=("$@")
    local -a batargs=()
    for arg in "${args[@]}"; do
        case "${arg}" in
            *.conf)
                batargs+=("--language=ini" "${arg}")
                ;;
            *)
                batargs+=("${arg}")
                ;;
        esac
    done
    /usr/bin/bat --theme-dark=TwoDark --color=always --decorations=never --paging=never "${batargs[@]}"
}

### Temporay writing
function temp() {
    local TEMP_FILE="$(mktemp -t TEMP_WRITE_DUMP.XXXX)"
    "${EDITOR}" "${TEMP_FILE}";
    cat "${TEMP_FILE}"
    rm "${TEMP_FILE}"
}

### Spanish lessons
function Spanish() {
    local file="${HOME}/LearnDir/Language/Spanish/Lesson_$(( $(date +%s)/86400 - 20152))_$(date +%d-%b-%Y_).md"

    mkdir -p "$(dirname "${file}")"

    if [[ ! -f "${file}" ]]; then
        touch "${file}"
        LOG info "Created ${GREEN}$(ColorPath "${file}")${NC}"
    fi

    if [[ -n "${EDITOR}" ]]; then
        command -v "$EDITOR" > /dev/null 2>&1 || EDITOR="vim"
        "${EDITOR:-"vim"}" "${file}"
        return 0
    else
        LOG error "Your EDITOR variable is unset. Please update it."
    fi

}

### Grammer checker
function grammer_check() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local arg="$1"
    local raw_text

    if [[ -f "${arg}" ]]; then
        raw_text=$(<"$file")
    else
        raw_text="$*"
    fi
    # Read and sanitize input

    # Remove control characters (except \n and \t)
    local clean_text
    clean_text=$(printf '%s' "$raw_text" | tr -d '\000-\011\013\014\016-\037')

    # Send to LanguageTool
    local json
    json=$(curl -s -X POST "https://api.languagetool.org/v2/check" \
        --data-urlencode "language=en-US" \
        --data-urlencode "text=$clean_text")

        # Check for valid JSON
        if ! echo "$json" | jq . >/dev/null 2>&1; then
            echo "❌ jq failed to parse the response. Possibly invalid input or corrupted JSON."
            return 1
        fi

        local red=$(tput setaf 1)
        local green=$(tput setaf 2)
        local yellow=$(tput setaf 3)
        local reset=$(tput sgr0)

        echo "$json" | jq -r --arg red "$red" --arg green "$green" --arg yellow "$yellow" --arg reset "$reset" '
        if (.matches | length) == 0 then
            "\($green)No issues found ✅\($reset)"
        else
            .matches[] |
                "\($red)Error:\($reset) \(.message)\n" +
            "\($yellow)Context:\($reset) \"\(.context.text)\"\n" +
            "\($green)Suggestion(s):\($reset) " +
            (if (.replacements | length) > 0 then
            (.replacements | map(.value) | join(", "))
        else
            "None"
        end) + "\n" +
        "Offset: \(.offset)\n---"
    end
    '
}

### Terminal file explorer
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd=
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

### Terminal file explorer with cd tracking
function yc() {
    clear
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd=
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

### Remove Unnecessary characters from given string
function Pretty() {
    for file in "$@"; do
        echo "$file" | sed 's/\[[^]]*\]//g' | sed 's/[^A-Za-z0-9._-$@]/_/g' | sed 's/_\+/_/g' 2> /dev/null
    done
}

### Remove Unnecessary characters from given file
function Pretty_rename() {
    for file in "$@"; do
        mv -- "${file}" "$(echo "$file" | sed 's/\[[^]]*\]//g' | sed 's/[^A-Za-z0-9._-$@]/_/g' | sed 's/_\+/_/g')" 2> /dev/null
    done
}

### Set CPU frequencies to certain limits
function SetPower() {
    local profile="$1"
    local -i stapm fast slow apuslow

    case "${profile}" in
        verylow|very-low)
            stapm=5000 fast=5000 slow=5000 apuslow=5000
            ;;
        low)
            stapm=10000 fast=10000 slow=8000 apuslow=8000
            ;;
        vibe|coding)
            stapm=15000 fast=15000 slow=12000 apuslow=12000
            ;;
        balanced)
            stapm=25000 fast=25000 slow=20000 apuslow=20000
            ;;
        high)
            stapm=45000 fast=45000 slow=35000 apuslow=35000
            ;;
        boost)
            stapm=65000 fast=65000 slow=54000 apuslow=54000
            ;;
        stock|default)
            LOG info "Your default stock values"
            stapm=65000 fast=65000 slow=54000 apuslow=54000
            sudo ryzenadj \
                --stapm-limit=$stapm \
                --fast-limit=$fast \
                --slow-limit=$slow \
                --apu-slow-limit=$apuslow \
                --stapm-time=1000 \
                --slow-time=5000 \
                --vrm-current=58000 \
                --vrmsoc-current=15000 \
                --vrmmax-current=110000 \
                --vrmsocmax-current=20000 \
                --tctl-temp=100000 \
                --apu-skin-temp=42000 \
                --dgpu-skin-temp=51000 2> /dev/null
            return 0
            ;;

        info)
            sudo ryzenadj --info 2> /dev/null
            return 0
            ;;
        *)
            LOG info "Usage: SetPower [verylow|low|balanced|high|boost|stock]"
            return 1
            ;;
    esac
    # Single call with dynamic values
    sudo ryzenadj --stapm-limit=$stapm --fast-limit=$fast --slow-limit=$slow --apu-slow-limit=$apuslow 2> /dev/null
}

### Download any video
function Yt-dlp_download() {
    local url="$@"
    yt-dlp -f "bestvideo[height<=1080][ext=webm]/bestvideo[height<=1080]+bestaudio" "${url[@]}"
}

### Get Ip and location info for current Network
function Ip() {
    command -v curl &> /dev/null || {
        LOG error "'curl' not installed"
            return 1
        }
    if command -v bat &> /dev/null; then
        bat --decorations=never --color=always --paging=never --language json <<< $(curl -s -4 ipinfo.io)
    else
        LOG warn "'bat' not installed"
        curl -4 ipinfo.io
    fi
}

### Update grub
function UpdateGrub() {
    sudo grub-mkconfig -o /boot/grub/grub.cfg

}

### Lauch steam with Nvidia
function Steam() {
    DRI_PRIME=1 __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia steam
}

### Man but cool man
function man() {
    local args=($@)
    /usr/bin/man ${args[@]} | /usr/bin/bat --decorations=never --color=always --language=markdown 2> /dev/null
}

