#!/usr/bin/env bash
# vim:filetype=bash


THIS_FILE="$0"

RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;80;250;100m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

PKG_MANAGER=

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            [[ -z "${QUIET}" ]] && printf "%b\n" "[${GREEN}*${NC}]: $@"
            ;;
        warn)
            printf "%b\n" "[${WARN}^${NC}]: $@"
            ;;
        error)
            printf "%b\n" "[${RED}!${NC}]: $@"
            ;;
    esac
}; alias Log="LOG"; alias L="LOG"

function ColorPath() {
    echo "$( sed "s@${HOME}@${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}@g" <(printf "%s\n" "${1}") )"
}

if [[ -n ${ZSH_VERSION} ]]; then
    unsetopt EXTENDED_HISTORY
    unsetopt extendedhistory
fi

### Global variables
export HOSTNAME="$(cat /etc/hostname)"
export LANG=en_US.UTF-8
export WINEPREFIX="$HOME/wine"
export HISTFILE="/tmp/histfile_$USER"
export EDITOR="nvim"
export BREW="/home/linuxbrew/.linuxbrew"
export PATH="/usr/bin"
export MEDIA="/run/media/$USER"
export XDG_DATA_HOME="$HOME/local/share"
export HOME="${HOME:-"$(echo ~)"}"

# Ls/Directory listing commands alias
alias LS="eza --color=always --icons=always --octal-permissions --binary --across"
alias LL="eza --long --color=always --icons=always --sort=created --group --long --header --classify=always --octal-permissions --binary --across --total-size"
alias LA="eza --color=always --icons=always --group --octal-permissions --binary --across --almost-all"
alias lll="eza --long --color=always --icons=always --group --numeric --long --header --classify=always --octal-permissions --binary --across --total-size"
alias l="eza --long --color=always --icons=always --group --octal-permissions --binary --across --sort=created --reverse"
alias ls="lsd --color=always --git --icon=always --group-dirs=first --classify 2> /dev/null"
alias ll="lsd --long --color=always --git --icon=always --group-dirs=first --classify --permission octal --total-size 2> /dev/null"
alias la="lsd --color=always --git --all --icon=always --group-dirs=first --classify --permission octal --total-size 2> /dev/null"
alias lsblk="lsblk --paths -o+SIZE --fs"

# File operations alias
alias mv="mv --verbose"
alias cp="LOG error '\${RED}Use rsync MF\${NC}'; return 1 &> /dev/null"
alias Cat="/usr/bin/bat --theme-dark=TwoDark --color=always --paging=always --decorations=never"

# Navigation/cd aliases
_CD_DIRS="mkdir -p \${dir} && cd \${dir}; unset dir"
alias M="dir=\${HOME}/Music && ${_CD_DIRS}"
alias V="dir=\${HOME}/Videos && ${_CD_DIRS}"
alias D="dir=\${HOME}/Downloads && ${_CD_DIRS}"
alias L="dir=\${HOME}/LearnDir && ${_CD_DIRS}"
alias d="dir=\${HOME}/dev && ${_CD_DIRS}"
alias media="/run/media/\${USER}"
unset _CD_DIRS

# Git aliases
alias gs="git status"

# Config file editing aliases
_EDIT_STUFF="\${EDITOR:-vim} \"\${config}\"; unset config"
alias zshrc="config=\$HOME/.zshrc && ${_EDIT_STUFF}"
alias vimrc="config=\$HOME/.vimrc && ${_EDIT_STUFF}"
alias nvimrc="config=\$HOME/.config/nvim/init.vim && ${_EDIT_STUFF}"
alias swayconfig="config=\${HOME}/.config/sway/config && ${_EDIT_STUFF}"
alias waybarconfig="config_dir=\${HOME}/.config/waybar && \${EDITOR:-vim} \"\${config_dir}\"; unset config_dir"
unset _EDIT_STUFF

# Package manager aliases
alias useless_pkg="pacman -Qtdq"
alias clean_cache="(paru -Scc || yay -Scc ) && sudo pacman -Scc"
alias clear_cache="(paru -Scc || yay -Scc ) && sudo pacman -Scc"

# System monitoring aliases
alias nvtop="nvtop --delay 2"
alias radeontop="radeontop --color"
alias Dmesg="dmesg --color=always | less"
alias watch="watch --no-title"
alias systemmonitor="XDG_CURRENT_DESKTOP=KDE GTK_THEME=Adwaita:dark QT_QPA_PLATFORMTHEME=gtk plasma-systemmonitor"

# Network/IP aliases
alias ip="ip --color=auto"
alias weather="curl wttr.in/24.5800,80.8369"

# Application/tool aliases
alias ncdu="ncdu --color dark"
alias qemu="qemu-system-x86_64"
alias sway="env WLR_RENDERER=vulkan sway"
alias VimBeGood="clear; docker run -it --rm brandoncc/vim-be-good:stable && echo && clear"
alias gtypistH="gtypist --personal-best --max-error=1.8 --no-welcome-screen --term-cursor --word-processor --always-sure"
alias mpv="mpv --vid=auto --vo=gpu-next --hwdec=vulkan --hdr-compute-peak --volume=64"
alias qutebrowser="QT_QPA_PLATFORM=xcb QT_WEBENGINE_DISABLE_GPU=1 qutebrowser"
alias colorchoser="env QT_QPA_PLATFORMTHEME=qt6ct kcolorchooser 2> /dev/null & disown"
alias getcolors="env QT_QPA_PLATFORMTHEME=qt6ct kcolorchooser 2> /dev/null & disown"

# Metadata/file info aliases
alias exiftool="/usr/bin/vendor_perl/exiftool"
alias metadata="/usr/bin/vendor_perl/exiftool"
alias Fonts="fc-list : file | sed 's|.*/||' | sed 's/\.[^.]*$//' | sort -u"

# System/log management aliases
alias clear_systemd_journal_logs="sudo journalctl --rotate && sudo journalctl --vacuum-size=1K && sudo journalctl --vacuum-time=1s"
alias sourceme="source ~/.zshrc"
alias savehist="file=$HOME/.saved_shell_history && cat \$HISTFILE >> \${file} && unset file"

# Flatpak application aliases
_FP_RUN="flatpak run \"\${fp_name}\" || flatpak install \"\${fp_name}\" -y"
alias fp-scrivano="fp_name=com.github.scrivanolabs.scrivano; ${_FP_RUN}; unset fp_name"
alias fp-draw="fp_name=com.github.scrivanolabs.scrivano; ${_FP_RUN}; unset fp_name"
alias fp-tipp10="fp_name=com.gitlab.tipp10.tipp10; ${_FP_RUN}; unset fp_name"
alias fp-ktouch="fp_name=org.kde.ktouch; ${_FP_RUN}; unset fp_name"
alias fp-typing="fp_name=org.kde.ktouch; ${_FP_RUN}; unset fp_name"
alias fp-easyeffects="fp_name=com.github.wwmm.easyeffects; ${_FP_RUN}; unset fp_name"
alias fp-effects="fp_name=com.github.wwmm.easyeffects; ${_FP_RUN}; unset fp_name"
alias fp-zen="fp_name=app.zen_browser.zen; ${_FP_RUN}; unset fp_name"
alias fp-pomodoro="fp_name=org.jousse.vincent.Pomodorolm; ${_FP_RUN}; unset fp_name"
alias fp-pomodorolm="fp_name=org.jousse.vincent.Pomodorolm; ${_FP_RUN}; unset fp_name"
alias fp-discord="fp_name=com.discordapp.Discord; ${_FP_RUN}; unset fp_name"
alias fp-VideoEditor="fp_name=org.kde.kdenlive; ${_FP_RUN}; unset fp_name"
alias fp-calculator="fp_name=io.github.Qalculate.qalculate-qt; ${_FP_RUN}; unset fp_name"
alias fp-qcal="fp_name=io.github.Qalculate.qalculate-qt; ${_FP_RUN}; unset fp_name"
unset _FP_RUN

# Utility aliases
alias NULL="/dev/null"

# Typo/alternative language aliases
alias сдуфк="clear"
alias ды="ls"

### Determine package manager
function PackageManager() {
    local -a pkg_m_Arr=()
    pkg_m_Arr=(pacman apt yum dnf yay)

    for pkg_m in "${pkg_m_Arr[@]}"; do
        if command -v "${pkg_m}" &> /dev/null; then
            PKG_MANAGER="${pkg_m}"
            [[ -z "$1" ]] && LOG info "You PackageManager is: ${pkg_m}"
            return 0
        fi
    done
}; alias pkg="PackageManager"; alias my_pkg_m="PackageManager"
alias my_package_manager="PackageManager"; alias my-package-manager="PackageManager"

### Just check basic utilities in system
function RequiredTools() {
    ## Get PackageManager
    [[ -z $1 ]] && LOG info "Most basic tools"
    PackageManager NULL
    local -a TOOL_ARR=()
    TOOL_ARR=(
        # Shells
        zsh fish
        # Editors
        nvim vim micro nano
        # Version control
        git
        # Networking
        curl rsync nmcli wget ssh traceroute dig
        # Compression
        gzip bzip2 xz zip
        # Container
        docker
        # filemanager
        yazi ranger
        # Build tools
        make cmake gcc clang
        # Scripting languages
        python ruby node npm
        # Productivity
        htop btop tmux figlet cowsay tree jq fzf bat lsd eza rg unzip zip
        # Compilers
        gcc clang gdb make cmake rustc
        # Media/ TUI visulas
        cava mpv imv feh pastel
        # Others
        jq lsd fzf bat eza rg yt-dlp rclone jq
        # DevOps & security extras (optional)
        kubectl ansible nmap john aircrack-ng
    )

    for binary in "${TOOL_ARR[@]}"; do
        if command -v "${binary}" &> /dev/null; then
            [[ -z $1 ]] && LOG info "Found '${BLUE}${binary}${NC}' in path: $(whereis ${binary} | cut -d' ' -f2)"
        else
            LOG error "'${BLUE}${binary}${NC}' Not Found. Install it using '$PKG_MANAGER'"
        fi
    done
    return 0
}; alias goodies="RequiredTools"; alias availabletools="RequiredTools"
alias mytools="RequiredTools"; alias tools="RequiredTools"

function RotTransform() {
    local operation_type="$1"
    local type_="$2"
    local Input="$3"
    local save_path="$4"
    local -a Enc=('tr' 'A-Za-z' 'N-ZA-Mn-za-m')
    local -a Dec=('tr' 'N-ZA-Mn-za-m' 'A-Za-z')
    local -a operation=()

    [[ -z "${Input}" ]] && {
        LOG error "Input '${Input}' is empty"
            return 1
        }

    if [[ "${operation_type}" == "encode" ]]; then
        operation=("${Enc[@]}")
    elif [[ "${operation_type}" == "decode" ]]; then
        operation=("${Dec[@]}")
    fi

    [[ -d "${Input}" ]] && {
        LOG error "Cannot use directories"
            return 1
        }
    if [[ -n "${save_path}" && -f  "${save_path}" ]]; then
        save_path="${save_path}"
    else
        unset save_path
    fi

    if [[ "${type_}" == "text" ]]; then
        [[ -z "${save_path}" ]] && ${operation[@]} <<< "${Input}" || \
            ${operation[@]} <<< "${Input}" > "${save_path}"
    else
        [[ -z "${save_path}" ]] && ${operation[@]} < "${Input}" || \
            ${operation[@]} < "${Input}" > "${save_path}"
    fi
}

### Rotate text by 13
function rot13() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local -a ARGS=("$@")
    local argc=${#ARGS[@]}
    local operation=
    local save_path=
    local input=
    local arg=
    local next_arg=

    if [[ $# -lt 1 ]]; then
        LOG error "At least one arguments expected"
        LOG info "rot13 <encode/decode> <file/string>"
        return 1
    fi

    for (( i=0 ; i < argc; i++ )); do
        arg="${ARGS[$i]}"
        case "${arg}" in
            -s|-save|--save)
                save_path="${ARGS[$(($i+1))]}"
                i=$((i+1))
                [[ -z "${save_path}" || ! -f "${save_path}" ]] && {
                    LOG error "Not a valid path: '${save_path}'"
                }
            ;;
        -s=*|-save=*|--save=*)
            save_path="${arg#*=}"
            [[ -z "${save_path}" || ! -f "${save_path}" ]] && {
                LOG error "Not a valid path: '${save_path}'"
            }
            ;;
        -e|-encode|--encode|encode|enc)
            operation="encode"
            ;;
        -d|-decode|--decode|decode|dec)
            operation="decode"
            ;;
        *)
            if [[ -n "${arg}" ]]; then
                [[ -z "${input}" ]] && input="${arg}" || {
                    LOG warn "Two inputs, Ignoring ${arg}"
                }
            fi
            ;;
        esac
    done

    [[ -z "${input}" ]] && {
        LOG error "Input '${input}' is empty"
        return 1
    }

    [[ -n "${save_path}" ]] && {
        printf "%s: " "Create this file? (y)es|(n)o"
        read -r YES
        [[ "${YES}" =~ ^(Yes|yes|y)$ ]] && touch "${save_path}"
    }

    if [[ ! -f "${input}" ]]; then
        # RotTransform encode|decode InputType Input FilePath
        RotTransform "${operation}" "text" "${input}" "${save_path}"
    else
        # RotTransform encode|decode InputType Input FilePath
        RotTransform "${operation:-"encode"}" "file" "${input}" "${save_path}"
    fi
}

### Fetch defined https_proxy and https_proxy variable to current shell environment
function Tor() {
    u_set="${1:-"NULL"}"

    set_var() {
        export http_proxy="socks5://127.0.0.1:9050"
        export https_proxy="socks5://127.0.0.1:9050"
    }

    unset_var() {
        unset http_proxy
        unset https_proxy
    }

    case "${arg}" in
        un*) unset_var && return 0 ;;
        sto*) sudo pkill -f "sudo tor" && return 0;;
    esac

    if pgrep -f "sudo tor" &> /dev/null; then
        set_var
        return 0
    fi
    sudo pkill -f "sudo tor"
    sudo tor &> /dev/null & disown
    set_var
    unset -f set_var unset_var
}

### Extract a tar archive
function Extract() {
    local archive="$1"
    case ${archive} in
        *.tar)
            tar --extract --verbose --file="${archive}"
            ;;
        *.tar.gz)
            tar --extract --gzip --verbose --file="${archive}"
            ;;
        *.tar.xz)
            tar --extract --xz --verbose --file="${archive}"
            ;;
        *.tar.bzip2)
            tar --extract --bzip2 --verbose --file="${archive}"
            ;;
        *)
            LOG error "'${archive}' is not tar archieve"
            ;;
    esac
}

### Mount a remote to local mount point
function RcloneMount() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    RequiredTools 0
    local -a ARGS=("$@") matches=()
    local action="${ARGS[0]}" drive="${ARGS[1]}" mountPoint="${ARGS[2]}"
    local list=0 mount=0 umount=0 show_size=0
    local -a matches=()

    [[ $# -eq 0 ]] && {
        LOG error "At least one arguemnt expected"
            LOG info "$0 <show-size|list|mount|umount> drive"
            return 1
        }

    if [[ -n "$action" ]]; then
        case "$action" in
            l|-l|-list|--list|list) list=1 ;;
            s|-s|-show|--show|--show-size|a|about) show_size=1 ;;
            m|-m|-mount|--mount|mount) mount=1 ;;
            u|-u|-umount|--umount|umount) umount=1 ;;
            *) LOG error "Unknown action '${BROWN}$action${NC}'"; return 1 ;;
        esac
    fi

    if [[ -n "$drive" ]]; then
        [[ -n "${drive#*=}" ]] && {
            drive="${drive#*=}"
        }
    [[ -n $BASH_VERSION ]] && mapfile -t matches < <(rclone listremotes | grep --color=never -i "${drive}")
    [[ -n $ZSH_VERSION ]] && {
        matches=("$(rclone listremotes | grep --color=never -i ${drive})")
    }

    if [[ ${#matches[@]} -eq 1 ]]; then
        drive=${matches[0]}
    elif [[ ${#matches[@]} -gt 1 ]]; then
        LOG error "Ambiguous drive name: multiple remotes: '${matches[*]}'"
        printf "Full Name of the remote: "
        read -r REMOTE
        drive="${REMOTE}"
    else
        LOG error "No remotes found"
        return 1
    fi

    [[ "${drive}" != *: ]] && drive+=:
    [[ -z "${drive}" ]] && {
        LOG error "No remotes. Exiting"
        return 1
    }
    LOG info "Remote: ${drive}"
        fi

        if [[ -n "${mountPoint}" ]]; then
            [[ -n "${mountPoint#*=}" ]] && {
                mountPoint="${mountPoint#*=}"
            }
        mkdir -p "${mountPoint}"
        [[ -d "${mountPoint}" ]] || LOG warn "Mount point '${mountPoint}' does not exist"
        fi

        [[ $list -eq 1 ]] && {
            rclone listremotes
        }

    if [[ -z "${drive}" && $listremotes -eq 0 ]]; then
        LOG error "Remote is empty"
        return 1
    fi

    [[ $mount -eq 1 && $umount -eq 1 ]] && {
        LOG warn "--mount and --umount cannot be together"
        return 1
    }

    [[ $show_size -eq 1 ]] && {
        rclone about ${drive}
    }

    if [[ $umount -eq 1 ]]; then
        [[ -z ${mountPoint} ]] && mountPoint=$(grep --color=never "${drive}" /proc/mounts | cut -d' ' -f2)
        if [[ -d "${mountPoint}" ]]; then
            fusermount -uz "${mountPoint}" || echo "Cannot remove '${DIR}'"
            rm -rf "${mountPoint}" && \
                echo -e "Cleaned '$(grep --color=always "${drive}" /proc/mounts | cut -d' ' -f2)'"
        fi
        return 0
    fi
    if [[ $mount -eq 1 ]]; then
        mountPoint="${mountPoint:="/tmp/defaultRemoteMount"}"
        [[ ! -d "${mountPoint}" ]] && mkdir -p "${mountPoint}"
        if rclone mount "${drive}":/ "${mountPoint}" --daemon; then
            grep "${mountPoint}" --color=always /proc/mounts
        fi
    fi
    return 0
}

### Suppliment function for compilation functions
function _compileExitHandler() {
    local exit_code="$1"
    shift
    local no_ext_filename="$1"
    shift
    local RM=0
    local -a total_files=()
    [[ $exit_code -gt 0 ]] && {
        LOG error "${RED}Compilation Failed${NC}"
            LOG error "Program exited with code : $exit_code"
            # Just return if compilation is failed
            return 1
        }
    for arg in "$@"; do
        if [[ "${arg}" == -* ]]; then
            [[ "${arg}" =~ ^(--rm|--remove|-rm|-r)$ ]] && RM=1
        else
            total_files+=("${arg}")
        fi
    done

    "${no_ext_filename}" "${total_files[@]}" # Run the compiled binary

    if [[ $RM -eq 1 ]]; then
        if rm -f "${no_ext_filename}"; then
            LOG info "Cleaned: ${no_ext_filename}"
        else
            LOG error "Failed to remove: ${no_ext_filename}"
        fi
    fi
}

### GUI develeopment (Debuging enabled)
function GUI_BUILD_DEBUG() {
    local FILE="$(realpath $1)"
    local NO_EXT_FILENAME="${FILE%.*}"
    shift
    [[ -f "$FILE" ]] && gcc -std=c++20 -Wall -Wextra -Werror -Wconversion \
        -Wshadow -pedantic -O0 -fno-inline -lstdc++ -lglfw -lGL -lglad -lm \
        "${FILE}" -o "${NO_EXT_FILENAME}" && "${NO_EXT_FILENAME}"
    "${NO_EXT_FILENAME}"
    _compileExitHandler $? "${NO_EXT_FILENAME}" "$@"
}

### GUI develeopment (release mode)
function GUI_BUILD_RELEASE() {
    local FILE="$(realpath $1)"
    local NO_EXT_FILENAME="${FILE%.*}"
    shift
    [[ -f "$FILE" ]] && gcc -std=c++20 -Wall -Wextra -Wconversion -Wshadow \
        -pedantic -O3 -flto -march=native -funroll-loops -fomit-frame-pointer \
        -lstdc++ -lglfw -lGL -lglad -lm \
        "${FILE}" -o "${NO_EXT_FILENAME}" && "${NO_EXT_FILENAME}"
    "${NO_EXT_FILENAME}"
    _compileExitHandler $? "${NO_EXT_FILENAME}" "$@"
}

# Predefined compiler flags for C/C++ source units
function Compile() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local -a args=("$@")
    local -a files=()
    local -a cmd_flags=() c_sources=() cpp_sources=()
    local arg="" out_="" output="main__" CC_="gcc"
    local output_type="captured"
    local -i remove_output=0 debug=0

    arg=""; for ((i=0; i < ${#args[@]}; i++ )); do
        arg="${args[$i]}"
        if [[ "${arg}" == -* ]]; then
            case "${arg}" in
                -rm|--rm|--remove)
                    remove_output=1
                    ;;
                -o|--output)
                    output="${arg}"
                    ;;
                -o=*|--output=*)
                    output="${arg#*=}"
                    [[ -z "${output}" ]] && output="main___"
                    ;;
                -*clang)
                    CC_="clang"
                    ;;
                -*clang=*)
                    CC_="${arg#*=}"
                    [[ -z "${CC_}" ]] && CC_="gcc"
                    ;;
                -*def*)
                    output_type="default"
                    ;;
                *)
                    LOG error "Invalid flag: '${arg}'"
                    ;;
            esac
        else
            [[ -s "${arg}" && -f "${arg}" ]] && files+=( "${arg}" ) || LOG error "Not a file: '${arg}'"
        fi
    done

    arg=""; for ((i=0; i < ${#files[@]}; i++ )); do
        arg="${args[$i]}"
        case "${arg}" in
            *.[cC]++|*.[cC][pP][pP])
                cpp_sources+=( "${arg}" )
            ;;
            *.[cC])
                c_sources+=( "${arg}" )
            ;;
            *)
                LOG error "Not a valid sources file: '${arg}'"
            ;;
        esac
    done

    if [[ ${#cpp_sources[@]} > 0 ]]; then
        cmd_flags=( "-x" "c++" "-std=c++20" )
        cmd_flags+=( "-lstdc++" "-lm" )
        cmd_flags+=( "-pedantic" "-Wall" "-Wextra" "-Werror" "-fno-elide-constructors" )
        [[ $debug -eq 1 ]] && cmd_flags+=( "-DDEBUG" )

        LOG info "$CC_ ${cmd_flags[*]} ${cpp_sources[*]} -o ${output}"
        $CC_ "${cmd_flags[@]}" "${cpp_sources[@]}" -o "${output}"
        if [[ $? -ne 0 ]]; then
            LOG error "Compilation failed"
            return 1
        fi
        LOG info "Running: ${output}: "

        if [[ "${output_type}" != "captured" ]]; then
            ./"${output}"
            return $?
        fi

        local lines out_
        if ! out_="$(./"${output}")"; then
            LOG error "Execution failed"
        fi

        if [[ -n "${ZSH_VERSION}" ]]; then
            lines=("${(f)out_}")
        else
            mapfile -t lines <<< "${out_}"
        fi

        for line in "${lines[@]}"; do
            printf "    %b\n" "${line}"
        done

        if [[ $remove_output -eq 1 ]]; then
            rm -f "${output}" && LOG info "cleaned: '${output}'"
        fi
        printf "\n"
    fi

    if [[ ${#c_sources[@]} > 0 ]]; then
        cmd_flags=( "-x" "c" "-std=c99" )
        cmd_flags+=( "-lstdc++" "-lm" )
        cmd_flags+=( "-pedantic" "-Wall" "-Wextra" "-Werror" )
        [[ $debug -eq 1 ]] && cmd_flags+=( "-DDEBUG" )

        LOG info "$CC_ ${cmd_flags[*]} ${c_sources[*]} -o ${output}"
        $CC_ "${cmd_flags[@]}" "${c_sources[@]}" -o "${output}"
        if [[ $? -ne 0 ]]; then
            LOG error "Compilation failed"
            return 1
        fi
        LOG info "Running: ${output}: "

        if [[ "${output_type}" != "captured" ]]; then
            ./"${output}"
            return $?
        fi

        local lines out_
        if ! out_="$(./"${output}")"; then
            LOG error "Execution failed"
        fi

        if [[ -n "${ZSH_VERSION}" ]]; then
            lines=("${(f)out_}")
        else
            mapfile -t lines <<< "${out_}"
        fi

        for line in "${lines[@]}"; do
            printf "    %b\n" "${line}"
        done

        if [[ $remove_output -eq 1 ]]; then
            rm -f "${output}" && LOG info "cleaned: '${output}'"
        fi
        printf "\n"
    fi

}

### Lauch sway Window manager with vulkan
function sway_vulkan() {
    cd ~/
    local num=$1
    local -i num_=0
    local LOG_FILE="/tmp/sway.log"
    [[ $num -eq 0 ]] && num_=128
    [[ $num -eq 1 ]] && num_=129
    # Tells Video Acceleration API (VA-API) to use the
    # intel / radeonsi / vdpau(legacy for Nvidia) backend for video decoding.
    export LIBVA_DRIVER_NAME=radeonsi
    # Overrides the Generic Buffer Management backend
    # GBM_BACKEND=nvidia-drm
    unset GBM_BACKEND
    # Forces GLX to use NVIDIA's implementation.
    # use mesa for intel/amd
    export __GLX_VENDOR_LIBRARY_NAME=mesa
    # Forces software rendering for cursors
    # 0 or unset
    export WLR_NO_HARDWARE_CURSORS=1
    # Tells wlroots which GPU device to use for DRM rendering
    # export WLR_DRM_DEVICES=/dev/dri/card0:/dev/dri/card1
    export WLR_DRM_DEVICES=/dev/dri/card$num
    # Forces wlroots to use Vulkan renderer.
    # gles2 for opengl or pixman CPU only
    export WLR_RENDERER=vulkan
    export XDG_SESSION_TYPE=wayland
    export XDG_CURRENT_DESKTOP=sway
    export DESKTOP_SESSION=sway
    /usr/bin/sway &> "$LOG_FILE" && {
        LOG info "Sway was started with $WLR_DRM_DEVICES"
    } || {
        LOG error "Sway cannot start with $WLR_DRM_DEVICES"
            [[ -s "$LOG_FILE" ]] && cat "$LOG_FILE"
        }
}

### Set the path with default locations
function SetPath() {
    PATH+=: PATH+="/usr/sbin:/sbin:/bin:/usr/local/bin:/usr/local/sbin"
    PATH+=: PATH+="${HOME}/.bin:${HOME}/.local/bin"
    PATH+=: PATH+="${HOME}/.cargo/bin:${HOME}/.npm_global/bin:${BREW}/bin"

    local tmp_path="/tmp/.home.path"
    if [[ ! -s "${tmp_path}" ]] ;then
        echo "$PATH" &> "${tmp_path}"
    else
        PATH="$(cat "${tmp_path}")"
        export PATH
    fi
}

### Show all the paths in $PATH
function ShowPath() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local IFS=$':' i=0
    for path in $PATH; do
        sed "s@${HOME}@\${HOME}@g" <(printf '%-2s %-2s %s\n' "${i}" '->' "${path}")
        ((i++))
    done
}; alias show_path="Paths"; alias print_path="Paths"

### Start SSH agent on initial login
function SSH_Agent() {
    local ssh_agent="/tmp/.ssh_agent"
    if [[ ! -s "${ssh_agent}" ]]; then
        touch "${ssh_agent}"
        echo "$(ssh-agent -s)" > "${ssh_agent}"
    else
        source "${ssh_agent}" &> /dev/null
    fi
}

### Get randomcolors quickly
function RandomColors() {
    local format="$1"
    pastel random | pastel format "${format:-"hex"}"
}

### Set refresh rate
function set_refresh_rate_to() {
    local -i req_hz=$1
    local output="" mode=""
    local px="" hz=""
    local local_grep="$(cut -d' ' -f2 <(whereis grep))"

    if [[ "${XDG_SESSION_TYPE}" == wayland ]]; then
        output="$(wlr-randr | head -n1 | cut -d' ' -f1)"
        px=$(wlr-randr | ${local_grep} current | awk -F' ' '{ print $1 }')
        hz=$(wlr-randr | ${local_grep} -P "(?=.*${px})(?=.*${req_hz})" | ${local_grep} -o -E "${req_hz}\.[0-9]+")
        mode="${px}px@${hz}Hz"
        wlr-randr --output ${output} --mode ${mode} && exit 0 || LOG error "Cannot set $req_hz"
    elif [[ "${XDG_SESSION_TYPE}" == x11 ]]; then
        output=$(xrandr | ${local_grep} 'connected primary' | cut -d' ' -f1)
        px=$(xrandr | ${local_grep} '\*' | awk -F' ' '{ print $1 }')
        hz=$(xrandr | ${local_grep} "${px}" | ${local_grep} -Eo "${req_hz}\.[0-9]+")
        LOG info "xrandr --output ${output} --mode ${px} --rate ${hz}"
        xrandr --output "${output}" --mode "${px}" --rate "${hz}" || LOG error "Cannot set $req_hz"
    fi
}

### Set refresh rate to 144Hz
function 144hz() {
    set_refresh_rate_to 144
}

### Set refresh rate to 60Hz
function 60hz() {
    set_refresh_rate_to 60
}

### AI in terminal
function gpt() {
    local type_="$1"
    [[ $# -gt 0 ]] && shift
    local -a prompt_=("$@")
    local session_log="/tmp/.tgpt_TYPE_$(date +%F_%T).log"
    case "${type_}" in
        dev)
            AI_PROVIDER=phind tgpt --multiline --log "${session_log/TYPE/phind}"
            ;;
        img)
            local img_path="${HOME}/Pictures/tgpt/"
            mkdir -p "${img_path}"
            img_path+="tgpt_$(date +%F_%T).png"
            tgpt --img --out "${img_path}" --width 512 --height 512 "${prompt_[*]}" && \
                LOG info "Your imge: $(ColorPath "${img_path}")"
            ;;
        *)
            AI_PROVIDER=isou tgpt --multiline --log "${session_log/TYPE/pollinations}"
            ;;
    esac
}; alias devgpt='gpt dev'; alias gptimg='gpt img'

### Pretty `cat` like command with colors
function catbat() {
    local -a args=("$@")
    local -a batargs=()
    for arg in "${args[@]}"; do
        case "${arg}" in
            *.conf)
                batargs+=("--language=ini" "${arg}")
                ;;
            *)
                batargs+=("${arg}")
                ;;
        esac
    done
    /usr/bin/bat --theme-dark=TwoDark --color=always --decorations=never --paging=never "${batargs[@]}"
}; alias Cat="catbat"

### Pretty `less` like command with colors
function Less() {
    local -a args=("$@")
    local -a batargs=()
    for arg in "${args[@]}"; do
        case "${arg}" in
            *.conf)
                batargs+=("--language=ini" "${arg}")
                ;;
            *)
                batargs+=("${arg}")
                ;;
        esac
    done
    /usr/bin/bat --theme-dark=TwoDark --color=always --decorations=never --paging=always "${batargs[@]}"
}

### Temporay writing
function t() {
    local temp_file="$(mktemp -t temp_edit_.XXXX)"
    local session_type=""
    "${EDITOR}" "${temp_file}"
    if [[ "${XDG_SESSION_TYPE}" == wayland ]]; then
        wl-copy < "${temp_file}" && LOG info "Wayland copy"
    elif [[ "${XDG_SESSION_TYPE}" == x11 ]]; then
        xsel < "${temp_file}" && LOG info "x11 copy"
    fi
    rm "${temp_file}"
}

### Spanish lessons
function Spanish() {
    local file="${HOME}/LearnDir/Language/Spanish/Lesson_$(( $(date +%s)/86400 - 20152))_$(date +%d-%b-%Y_).md"

    mkdir -p "$(dirname "${file}")"

    if [[ ! -f "${file}" ]]; then
        touch "${file}"
        LOG info "Created ${GREEN}$(ColorPath "${file}")${NC}"
    fi

    if [[ -n "${EDITOR}" ]]; then
        command -v "$EDITOR" > /dev/null 2>&1 || EDITOR="vim"
        "${EDITOR:-"vim"}" "${file}"
        return 0
    else
        LOG error "Your EDITOR variable is unset. Please update it."
    fi

}

### Grammer checker
function grammer_check() {
    [[ -n $ZSH_VERSION ]] && emulate -LR bash
    local arg="$1"
    local raw_text

    if [[ -f "${arg}" ]]; then
        raw_text=$(<"$file")
    else
        raw_text="$*"
    fi
    # Read and sanitize input

    # Remove control characters (except \n and \t)
    local clean_text
    clean_text=$(printf '%s' "$raw_text" | tr -d '\000-\011\013\014\016-\037')

    # Send to LanguageTool
    local json
    json=$(curl -s -X POST "https://api.languagetool.org/v2/check" \
        --data-urlencode "language=en-US" \
        --data-urlencode "text=$clean_text")

        # Check for valid JSON
        if ! echo "$json" | jq . >/dev/null 2>&1; then
            echo "❌ jq failed to parse the response. Possibly invalid input or corrupted JSON."
            return 1
        fi

        local red=$(tput setaf 1)
        local green=$(tput setaf 2)
        local yellow=$(tput setaf 3)
        local reset=$(tput sgr0)

        echo "$json" | jq -r --arg red "$red" --arg green "$green" --arg yellow "$yellow" --arg reset "$reset" '
        if (.matches | length) == 0 then
            "\($green)No issues found \($reset)"
        else
            .matches[] |
                "\($red)Error:\($reset) \(.message)\n" +
            "\($yellow)Context:\($reset) \"\(.context.text)\"\n" +
            "\($green)Suggestion(s):\($reset) " +
            (if (.replacements | length) > 0 then
            (.replacements | map(.value) | join(", "))
        else
            "None"
        end) + "\n" +
        "Offset: \(.offset)\n---"
    end
    '
}

### Terminal file explorer with cd tracking
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd=
    yazi "$@" --cwd-file="${tmp}"
    if cwd="$(command cat -- "${tmp}")" && [[ -n "${cwd}" && "${cwd}" != "${PWD}" ]]; then
        builtin cd -- "${cwd}"
    fi
    rm -f -- "${tmp}"
}

# sysstat: lightweight stats (net + disk)
sysstat() {
    local iface="${1:-wlo1}"      # network iface (default wlo1)
    local dev="${2:-nvme0n1}"     # block device (default nvme0n1)
    local interval="${3:-1}"      # interval seconds
    local iterations="${4:-1}"    # how many iterations (default 1, -1=infinite)

    # --- paths ---
    local rx_path="/sys/class/net/$iface/statistics/rx_bytes"
    local tx_path="/sys/class/net/$iface/statistics/tx_bytes"
    local stat_path="/sys/block/$dev/stat"
    local st_dir="/sys/block/$dev/statistics"

    [[ ! -e $rx_path ]] && { echo "No such iface: $iface"; return 1; }
    [[ ! -e $stat_path ]] && { echo "No such block dev: $dev"; return 1; }

    # --- helpers ---
    human() {
        local bytes=$1
        if (( bytes > 1073741824 )); then
            awk -v b=$bytes 'BEGIN{printf "%.2f GiB", b/1073741824}'
        elif (( bytes > 1048576 )); then
            awk -v b=$bytes 'BEGIN{printf "%.2f MiB", b/1048576}'
        elif (( bytes > 1024 )); then
            awk -v b=$bytes 'BEGIN{printf "%.2f KiB", b/1024}'
        else
            printf "%d B" "$bytes"
        fi
    }

    get_disk_bytes() {
        if [[ -r "$st_dir/read_bytes" && -r "$st_dir/write_bytes" ]]; then
            # some block devices export these
            local rd=$(<"$st_dir/read_bytes")
            local wr=$(<"$st_dir/write_bytes")
            echo "$rd $wr"
        else
            # fallback to parsing /stat
            # field3=sectors_read, field7=sectors_written
            awk '{print $3*512, $7*512}' "$stat_path"
        fi
    }

    # one-shot totals
    if (( iterations == 1 )); then
        local rx=$(<"$rx_path") tx=$(<"$tx_path")
        read -r rd wr < <(get_disk_bytes)

        echo "Total Download: $(human $rx)"
        echo "Total Upload:   $(human $tx)"
        echo "Disk Read:      $(human $rd)"
        echo "Disk Write:     $(human $wr)"
        return 0
    fi

    # realtime mode
    local prev_rx=$(<"$rx_path") prev_tx=$(<"$tx_path")
    read -r prev_rd prev_wr < <(get_disk_bytes)

    printf "\n"
    while :; do
        sleep "$interval"
        local rx=$(<"$rx_path") tx=$(<"$tx_path")
        read -r rd wr < <(get_disk_bytes)

        local drx=$((rx - prev_rx))
        local dtx=$((tx - prev_tx))
        local drd=$((rd - prev_rd))
        local dwr=$((wr - prev_wr))

        printf "\033[1A\033[2K"
        printf "%s | Net ↓ %s/s ↑ %s/s | Disk R %s/s W %s/s\n" \
            "$(date +%T)" \
            "$(human $drx)" \
            "$(human $dtx)" \
            "$(human $drd)" \
            "$(human $dwr)"

        prev_rx=$rx prev_tx=$tx prev_rd=$rd prev_wr=$wr
        (( iterations > 0 )) && (( --iterations == 0 )) && break
    done
    unset -f get_disk_bytes human
}

### Terminal file explorer with cd tracking
function yc() {
    clear
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd=
    yazi "$@" --cwd-file="${tmp}"
    if cwd="$(command cat -- "${tmp}")" && [[ -n "${cwd}" && "${cwd}" != "${PWD}" ]]; then
        builtin cd -- "${cwd}"
    fi
    rm -f -- "${tmp}"
}

### Remove Unnecessary characters from given string
function Pretty() {
    for file in "$@"; do
        echo "$file" | sed 's/\[[^]]*\]//g' | sed 's/[^A-Za-z0-9._-$@]/_/g' | sed 's/_\+/_/g' 2> /dev/null
    done
}

### Remove Unnecessary characters from given file
function Pretty_rename() {
    for file in "$@"; do
        mv -- "${file}" "$(echo "$file" | sed 's/\[[^]]*\]//g' | sed 's/[^A-Za-z0-9._-$@]/_/g' | sed 's/_\+/_/g')" 2> /dev/null
    done
}

function start_docker() {
    sudo -v
    sudo containerd &> /dev/null & disown
    sudo dockerd --host=unix:///var/run/docker.sock --containerd=/run/containerd/containerd.sock &> /dev/null & disown
}; alias stop_docker="sudo pkill -f 'containerd|dockerd'"

### Set CPU frequencies to certain limits
function SetPower() {
    local profile="$1"
    local -i stapm fast slow apuslow
    local -i t=1000

    command -v ryzenadj &> /dev/null || {
        LOG error "'ryzenadj' not found, install it"
        return 1
    }

    case "${profile}" in
        verylow|very-low)
            stapm=$((5*t)) fast=$((5*t)) slow=$((5*t)) apuslow=$((5*t))
            ;;
        low)
            stapm=$((10*t)) fast=$((10*t)) slow=$((8*t)) apuslow=$((8*t))
            ;;
        vibe|coding)
            stapm=$((15*t)) fast=$((15*t)) slow=$((12*t)) apuslow=$((12*t))
            ;;
        balanced)
            stapm=$((25*t)) fast=$((25*t)) slow=$((20*t)) apuslow=$((20*t))
            ;;
        high)
            stapm=$((45*t)) fast=$((45*t)) slow=$((35*t)) apuslow=$((35*t))
            ;;
        boost)
            stapm=$((65*t)) fast=$((65*t)) slow=$((54*t)) apuslow=$((54*t))
            ;;
        stock|default)
            LOG info "Your default stock values"
            stapm=$((65*t)) fast=$((65*t)) slow=$((54*t)) apuslow=$((54*t))
            sudo ryzenadj \
                --stapm-limit=$stapm \
                --fast-limit=$fast \
                --slow-limit=$slow \
                --apu-slow-limit=$apuslow \
                --stapm-time=$((1*t)) \
                --slow-time=$((5*t)) \
                --vrm-current=$((58*t)) \
                --vrmsoc-current=$((15*t)) \
                --vrmmax-current=$((110*t)) \
                --vrmsocmax-current=$((20*t)) \
                --tctl-temp=85 \
                --apu-skin-temp=$((42*t)) \
                --dgpu-skin-temp=$((51*t)) 2> /dev/null
            return 0
            ;;

        info)
            sudo ryzenadj --info 2> /dev/null
            return 0
            ;;
        *)
            LOG info "Usage: SetPower [verylow|low|balanced|high|boost|stock]"
            return 1
            ;;
    esac
    # Single call with dynamic values
    sudo ryzenadj --stapm-limit=$stapm --fast-limit=$fast --slow-limit=$slow --apu-slow-limit=$apuslow --tctl-temp=80 2> /dev/null
}

function browser() {
    local firefox_profile_name="$1"
    local firefox_profile_dir="${HOME}/.profiles"
    local profile="" browser=""

    if command -v waterfox &> /dev/null; then
        browser="waterfox"
    elif command -v firefox &> /dev/null; then
        LOG info "Waterfox not found, using firefox"
        browser="firefox"
    else
        LOG error "Waterfox not installed"
        return 1
    fi

    mkdir -p "${firefox_profile_dir}"

    if [[ "${firefox_profile_name}" != */* ]]; then
        profile="${firefox_profile_dir}/${firefox_profile_name:-"dev"}"
    else
        profile="${firefox_profile_name}"
    fi

    LOG info "$browser --profile $(ColorPath "${profile}") &> /dev/null & disown"

    $browser --profile "${profile}" &> /dev/null & disown

    if [[ "${XDG_SESSION_DESKTOP}" == "sway" ]]; then
        timeout --signal SIGKILL 6s bash -c "
            while ! swaymsg -t get_tree -r | jq -e '.. | select(type == \"object\" and (.app_id? | type == \"string\" and test(\"^${browser}\")))' &> /dev/null; do
                sleep 0.01
            done
            sleep 0.2
            swaymsg '[app_id=\"${browser}\"] resize set width 1444 height 784'
        "
    fi
    exit 0
}

psmem() {
    if [[ -z "$1" ]]; then
        echo "Please provide a process name or PID."
        return 1
    fi
    awk '{
        rss=$1/1024;
        if (rss>=1024) {
            gb=sprintf("%.2f GB", (rss/1024));
            printf "%-20s %5s\n", gb, $2;
        }
        else {
            mb=sprintf("%.2f MB", rss);
            printf "%-20s %5s\n", mb, $2;
        }

    }' <(ps -o rss,comm -p $(pgrep -d, "$1")) | grep -v "0.00 MB"
}

### Download any video
function Yt-dlp_download() {
    local url="$@"
    yt-dlp -f "bestvideo[height<=1080][ext=webm]/bestvideo[height<=1080]+bestaudio" "${url[@]}"
}

### Get Ip and location info for current Network
function Ip() {
    command -v curl &> /dev/null || {
        LOG error "'curl' not installed"
            return 1
        }
    if command -v bat &> /dev/null; then
        bat --decorations=never --color=always --paging=never --language json <<< $(curl -s -4 ipinfo.io)
    else
        LOG warn "'bat' not installed"
        curl -4 ipinfo.io
    fi
}

### Update grub
function update-grub() {
    sudo grub-mkconfig -o /boot/grub/grub.cfg
}

### Run neovim with sudo
function sudo_nvim() {
  sudo env WAYLAND_DISPLAY=$WAYLAND_DISPLAY DISPLAY=$DISPLAY nvim "$@"
}

### Sort by file size
function Sort() {
    local -a total_args=("$@")
    if [[ ${#total_args} -eq 0 ]];then
        LOG error "Please profile items"
        return 1
    fi
    du -sh "${total_args[@]}" | /usr/bin/sort --numeric-sort
}

function ToggleDrivers() {
    local -a args=("$@")

    toggle_driver_() {
        local module="$1"
        local device="$2"
        [[ $# -ne 2 ]] && return 1
        if lsmod | grep -q "^${module}"; then
            sudo modprobe -r "${module}" && LOG info "Disabled ${device}"
        else
            sudo modprobe "${module}" && LOG info "Enabled ${device}"
        fi
    }

    for arg in "${args[@]}"; do
        case ${arg} in
            [Cc][Aa][Mm]*) # camera
                toggle_driver_ "uvcvideo" "Camera"
            ;;
            [Gg][Pp][Ss]*) # gps
                toggle_driver_ "uvcvideo" "Gps"
            ;;
        esac
    done
    unset -f toggle_driver_
}

### Lauch steam with Nvidia
function Steam() {
    DRI_PRIME=1 __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia steam
}

function Font() {
    local font_name="$1"
    fc-list | grep -o -i "${font_name}.*\." | awk -F'.' '{ print $1 }' | tr '-' ' '
}

### Run with nvidia
function nvidia() {
    local -a binary=("$1"); shift
    local -a args=("$@")

    if [[ -z "${binary[*]}" ]]; then
        printf '[ERROR]: %s\n' "No binary to execute?"
        return 1
    fi

    if ls -l "${binary[*]}" &> /dev/null; then
        printf '[INFO]: %s: ./%s' "Running from current directory" "${binary[*]}"
        binary=("./${binary[*]}")
    elif command -v "${binary}" &> /dev/null; then
        printf '[INFO]: %s: %s' "Running from PATH" "$(which "${binary[*]}")"
        binary=("${binary[*]}")
    else
        printf '[ERROR]: %s; %s\n' "${binary[*]}" "No such file or binary?"
        return 1
    fi

    local vulkan_icd_path=${VK_ICD_FILENAMES:-"/usr/share/vulkan/icd.d/nvidia_icd.json"}
    local vk_optimus_layer=${__VK_LAYER_NV_optimus:-"NVIDIA_only"}
    local glx_vendor_name=${__GLX_VENDOR_LIBRARY_NAME:-"nvidia"}
    local -i prime_render_offload=${__NV_PRIME_RENDER_OFFLOAD:-1}
    local -i dxvk_hud_setting=${DXVK_HUD:-1}
    local -i mangohud_enabled=${MANGOHUD:-1}

    local -a environment_variables=(
        VK_ICD_FILENAMES=${vulkan_icd_path}
        __VK_LAYER_NV_optimus=${vk_optimus_layer}
        __GLX_VENDOR_LIBRARY_NAME=${glx_vendor_name}
        __NV_PRIME_RENDER_OFFLOAD=${prime_render_offload}
        DXVK_HUD=${dxvk_hud_setting}
        MANGOHUD=${mangohud_enabled}
    )
    # Run executable
    exec env "${environment_variables[@]}" "${binary[*]}" "${args[@]}"
}; alias nvrun="nvidia"

### Man but cool man
function man() {
    local args=($@)
    /usr/bin/man ${args[@]} | /usr/bin/bat --decorations=never --color=always --language=markdown 2> /dev/null
}

