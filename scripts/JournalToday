#!/usr/bin/env bash

# trap can't save your ass from SIGKILL
trap Cleanup SIGTERM SIGINT

### Edit these vairables to their correct values

### Journal directory (All your journal's will be here)
JOURNAL_DIR="${HOME}/journalD"
### tr TRANSFORM_KEY file
TRANSFORM_KEY="${HOME}/._tr"
### Any existing template you want
TEMPLATE="${JOURNAL_DIR}/.template"
### Line of text after and including from the template will be part of journal template
JOURNAL_FILE="$(date +%d-%b-%Y_).md"
### Unique temp file for plain text editing
TEMP_FILE=""

RED="\033[38;2;159;29;75m"
GREEN="\033[38;2;108;176;97m"
BLUE="\033[38;2;103;128;229m"
LIGHT_GREEN="\033[38;2;115;202;97m"
MUDDY="\033[38;2;181;191;121m"
NC="\033[0m"

function LOG() {
    type_="$1"
    shift
    case "$type_" in
        error)
            printf "[%b%s%b]: %b\n" "${RED}" "ERROR" "${NC}" "$*"
            ;;
        info)
            printf "[%b%s%b]: %b\n" "${GREEN}" "INFO" "${NC}" "$*"
            ;;
    esac
}

function ColorPath() {
    echo "$( sed "s@${HOME}@${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}@g" <(printf "%s\n" "${1}") )"
}

function CreateNewKey() {
    local -r NEW_KEY="$(printf "%s -> %s\n" "$(echo {{A..Z},{a..z}} | tr ' ' '\n' | shuf | tr -d '\n' )" "$(echo {{A..Z},{a..z}} | tr -d ' ')")"
    if [[ -n "${NEW_KEY}" ]]; then
        echo "${NEW_KEY}" > "${TRANSFORM_KEY}" && \
            LOG info "New key generated: ${NEW_KEY}"
    else
        LOG error "Failed to create new key"
    fi
}

function EncodeTextFile() {
    local FILE1="$1" # Plain text file (no substitution cipher)
    local FILE2="$2" # The journal file
    local verbose="$3"
    # fill FILE2 from readable text ==> Gibrish
    [[ $verbose -eq 1 ]] && LOG info "Applying Substitution cipher '$(ColorPath "${FILE1}")' ==> '$(ColorPath "${FILE2}")'"
    tr 'A-Za-z' "${TRANSFORM_KEY}" < "${FILE1}" > "${FILE2}"
}

function DecodeTextFile() {
    local FILE1="$1" # substitution cipher encoded file
    local FILE2="$2" # Temporary file
    local verbose="$3"
    # Fill FILE2 from Gibrish ==> readable text
    [[ $verbose -eq 1 ]] && LOG info "Reverting Substitution cipher '$(ColorPath "${FILE1}")' ==> '$(ColorPath "${FILE2}")'"
    tr "${TRANSFORM_KEY}" 'A-Za-z' < "${FILE1}" > "${FILE2}"
}

function Cleanup() {
    local verbose="$1"
    EncodeTextFile "$TEMP_FILE" "${JOURNAL_DIR}/${JOURNAL_FILE}" $verbose && rm -f "$TEMP_FILE" && \
        [[ $verbose -eq 1 ]] && LOG info "Temporary file cleaned '$(ColorPath "${TEMP_FILE}")'"
}

function ShowJournal() {
    [[ -s ${TRANSFORM_KEY} ]] && local -r KEY="$(cat ${TRANSFORM_KEY} | cut -d' ' -f1)" || \
        local -r KEY="${TRANSFORM_KEY}"
    [[ -n $KEY ]] && {
        LOG info "From file: ${JOURNAL_DIR}/${JOURNAL_FILE}\n"
        if command -v bat &> /dev/null; then
            bat --language=md --paging=never --decorations=never --color=always \
                <(tr "$KEY" 'A-Za-z' < "${JOURNAL_DIR}/${JOURNAL_FILE}")
            return 0
        else
            tr "$KEY" 'A-Za-z' < "${JOURNAL_DIR}/${JOURNAL_FILE}"
        fi
    }
    LOG info "Process completed, exiting..."
}

function ShowTemplate() {
    LOG info "From file: ${JOURNAL_DIR}/${JOURNAL_FILE}\n"
    if command -v bat &> /dev/null; then
        bat --language=md --paging=never --decorations=never --color=always \
            "${TEMPLATE}"
    else
        cat "${TEMPLATE}"
    fi
    LOG info "Process completed, exiting..."
}

function EditTemplate() {
    export EDITOR
    local BACKUP="${TEMPLATE}_$(date +%s).bak"
    LOG info "Copying last changes: ${LIGHT_GREEN}${TEMPLATE}${NC} ==> $(ColorPath "${BACKUP}")"
    cp "${TEMPLATE}" "${BACKUP}"
    LOG info "Editing template: $(ColorPath "${TEMPLATE}")"
    "${EDITOR:-"vim"}" "${TEMPLATE}"
}

function EditJournalFile() {
    ### If file doesn't exist and empty, create the file and provide a default template

    ### Create a temporary file
    TEMP_FILE="$(mktemp ${JOURNAL_DIR}/.${JOURNAL_FILE}.XXXXXX.tmp)"
    local Editor="$1"
    local verbose="$2"

    if [[ -n "${Editor}" ]]; then
        command -v "${Editor}" &> /dev/null || {
            LOG info "Editor '${Editor^}' not found faling back to vim"
            Editor="vim"
        }
    else
        LOG error "No editor given."
        return 0
    fi

    [[ -s "${TEMPLATE}" ]] || {
        echo "Template here" > "${TEMPLATE}"
    }

    if [[ ! -s "${JOURNAL_DIR}/${JOURNAL_FILE}" ]]; then
        ### Fill the Journal with a template
        EncodeTextFile "${TEMPLATE}" "${JOURNAL_DIR}/${JOURNAL_FILE}" $verbose
    fi

    [[ $verbose -eq 1 ]] && LOG info "Editor Initialized: ${Editor^}"
    if [[ "$Editor" == "vim" ]]; then
        DecodeTextFile "${JOURNAL_DIR}/${JOURNAL_FILE}" "$TEMP_FILE" $verbose
        [[ $verbose -eq 1 ]] && LOG info "Editing temporary file '$(ColorPath "${TEMP_FILE}")'"
        sleep 0.01; vim -c 'colorscheme slate' "$TEMP_FILE"
        Cleanup $verbose
    else
        DecodeTextFile "${JOURNAL_DIR}/${JOURNAL_FILE}" "$TEMP_FILE" $verbose
        [[ $verbose -eq 1 ]] && LOG info "Editing temporary file '$(ColorPath "${TEMP_FILE}")'"
        sleep 0.01; "${Editor:-"vim"}" "$TEMP_FILE"
        Cleanup $verbose
    fi

    [[ $verbose -eq 1 ]] && LOG info "Process completed, exiting..."
}

function Usage() {
    printf "%b\n" \
        "" \
        " ${GREEN}Usage:${NC} JournalToday [OPTIONS] [EDITOR]" \
        "" \
        " ${MUDDY}Options:${NC}" \
        "   ${GREEN}-s, --show, --view${NC}     Show today's journal (with decryption)" \
        "   ${GREEN}-e, --edit${NC}             Edit today's journal using default (vim)" \
        "   ${GREEN}-t, --template${NC}         Edit the journal template" \
        "   ${GREEN}-r, --review${NC}           (Reserved) Review mode, no-op for now" \
        "" \
        " ${MUDDY}Editor (used alone):${NC}" \
        "   ${GREEN}vim | nvim | nano | micro${NC}   Launch and edit today's journal using the specified editor" \
        "" \
        " ${MUDDY}Examples:${NC}" \
        "   ${GREEN}JournalToday --edit${NC}         # Edit with default editor (vim)" \
        "   ${GREEN}JournalToday micro${NC}          # Edit using micro editor" \
        "   ${GREEN}JournalToday --template${NC}     # Modify the template file" \
        "   ${GREEN}JournalToday --show${NC}         # View today's decrypted journal" \
        "" \
        " ${RED}Note:${NC} Template will be used if no journal exists. Edits are stored encrypted." \
        ""
}

function main() {
    local -a ARGS=("$@")

    local edit_file=0
    local edit_template=0
    local Editor=""
    local verbose=0

    if [[ -s "${TRANSFORM_KEY}" ]]; then
        TRANSFORM_KEY="$(cat ${TRANSFORM_KEY} | cut -d' ' -f1)"
    else
        CreateNewKey && TRANSFORM_KEY="$(cat ${TRANSFORM_KEY} | cut -d' ' -f1)"
    fi

    [[ -z $TRANSFORM_KEY ]] && {
        LOG error "Transform_key is empty"
        return 1
    }

    if [[ ! -d "${JOURNAL_DIR}" ]]; then
        LOG error "Path '"${JOURNAL_DIR}"' doesnt' exist"
        mkdir -p "${JOURNAL_DIR}" && {
            LOG info "Created new journal directory: '${JOURNAL_DIR}'"
        } || {
            LOG error "Failed to create directory: '${JOURNAL_DIR}'"
        }
    fi

    ### Parse arguments
    for arg in "${ARGS[@]}"; do
        case "$arg" in
            -s|s|--show|show|--view|view)
                ShowJournal
                return 0
                ;;
            -r|r|--review|review)
                ShowJournal | less
                return 0
                ;;
            -e|e|--edit|edit)
                edit_file=1
                ;;
            -t|t|--template|template)
                edit_template=1
                ;;
            -h|h|--help|help)
                Usage
                return 0
                ;;
            *vim|*nvim|*micro|*nano)
                edit_file=1
                Editor="${arg}"
                if [[ -n "${Editor#*=}" ]]; then
                    Editor="${Editor#*=}"
                else
                    Editor="$arg"
                fi
                ;;
            -v|--verbose)
                verbose=1
                ;;
            *)
                LOG error "Invalid flag: '$arg'"
                ;;
        esac
    done

    if [[ $edit_file -eq 1 && $edit_template -eq 1 ]]; then
        EditTemplate
        LOG info "Process completed, exiting..."
        return 0
    elif [[ $edit_file -eq 0 && $edit_template -eq 1 ]]; then
        ShowTemplate
        return 0
    fi

    if [[ $edit_file -eq 1 ]]; then
        EditJournalFile "${Editor:-"vim"}" $verbose
        return 0
    fi

    if [[ ! -f "${JOURNAL_DIR}/${JOURNAL_FILE}" ]]; then
        touch "${JOURNAL_DIR}/${JOURNAL_FILE}" && \
            LOG info "Created ${GREEN}${JOURNAL_DIR}/${JOURNAL_FILE}${NC}"
    else
        [[ ${#ARGS} -eq 0 ]] && LOG info "File '${GREEN}${JOURNAL_DIR}/${JOURNAL_FILE}${NC}' already exists"
    fi
}

main "$@"

