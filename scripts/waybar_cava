#!/usr/bin/env bash

# Actual bar string
BAR=""
# glyph characters
CAVA_BAR=""
# Create cava config
CONFIG_FILE="/tmp/.waybar_cava_config"
# Output Pipe
pipe="/tmp/.waybar_cava_pipe"
# change the length of cava visualizer
bar_len=6
# 1 Use alternative bar. 0 don't use alternative
use_bar_num=${1:-2}
# Noise reduction
noise_level=0

DICT="s/;//g"

pkill -f "cava -p ${CONFIG_FILE}" &>/dev/null
[[ -e "${pipe}" ]] && rm "${pipe}"
mkfifo "${pipe}"

trap 'ToggleBar' SIGUSR1

# Bar characters (represents visualizer levels)
function SetBar() {
    local ALT_BAR=$1
    CAVA_BAR=""

    case $use_bar_num in
        0) BAR="▁▂▃▄▅▆▇█"; noise_level=40 ;;
        1) BAR="░░▒▒▓▓██"; noise_level=88 ;;
        2) BAR="⣀⣄⣆⣇⣧⣷⣿"; noise_level=70 ;;
    esac

    for i in $(seq 1 $((bar_len*2))); do
        CAVA_BAR+="${BAR:0:1}"
    done

    DICT="s/;//g"
    # Create dictionary to replace char with BAR
    for ((i = 0; i < ${#BAR}; i++)); do
        DICT+=";s/$i/${BAR:$i:1}/g"
    done
}

function StartCava() {
    # Kill existing cava process
    pkill -f "cava -p ${CONFIG_FILE}" &> /dev/null
    cava -p "${CONFIG_FILE}" &
}

function BuildConfig() {
cat > "${CONFIG_FILE}" << EOF
[general]
bars = ${#CAVA_BAR}
framerate = 36

[input]
method = pulse
source = auto

[output]
method = raw
raw_target = ${pipe}
data_format = ascii
ascii_max_range = $((${#BAR} - 1))

[smoothing]
noise_reduction = $noise_level
EOF
}

function ToggleBar() {
    use_bar_num=$(( (use_bar_num + 1) % 3))
    ## Set the BARs
    SetBar ${use_bar_num:-0}
    ## ReCreate the config
    BuildConfig
    ## Restart cava
    StartCava
}

## Set the BARs
SetBar ${use_bar_num:-0}
## Create the config
BuildConfig
## Restart cava
StartCava

# Read stdout from cava, transform output, and check for activity
while read -r line < "${pipe}"; do
    visualizer_output=$(echo "${line}" | sed -u "${DICT}")

    # Detect if there's any visualizer activity (i.e., non-empty output)
    if [[ -n "${visualizer_output}" && "${visualizer_output}" != "${CAVA_BAR}" ]]; then
        # Send JSON output with a class to enable blinking
        echo "{\"text\": \"${visualizer_output}\", \"class\": \"active\"}"
    else
        # Send JSON output with a class to disable blinking
        echo "{\"text\": \"${visualizer_output}\", \"class\": \"inactive\"}"
    fi
done

