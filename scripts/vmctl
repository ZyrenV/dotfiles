#!/usr/bin/env bash

set -euo pipefail

# Colors
HL="\033[1m"
NC="\033[0m"
MSG_COL="\033[38;2;255;240;200m"
RED="\033[38;2;196;29;31m"
BLUE="\033[38;2;116;112;218m"
WARN_COL="\033[38;2;203;82;96m"

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            printf "%b\n" "$*"
            ;;
        error)
            printf "[%b%s%b]: %b\n" "${RED}"      "ERR"  "${NC}" "$*"
            ;;
        warn)
            printf "[%b%s%b]: %b\n" "${WARN_COL}" "WARN" "${NC}" "$*"
            ;;
        fatal)
            printf "[%b%s%b]: %b\n" "${RED}"      "FATAL" "${NC}" "$*"
            exit 1
            ;;
    esac
}

# Usage message
function Usage() {
    local config_file="$1"
    local script_basename="$(basename "$0")"
    printf '\n%b\n' "${HL}Usage${NC}: $(basename "$0") [boot] [options] <profile1> <profile2> ...\n"
    printf "  ${MSG_COL}%-18b${NC} %b\n" \
        "boot"              "Boot from ISO + disk image" \
        "<profile>"         "Profile name (defined in $(ColorPath "${config_file}"))" \
        "-f, fullscreen"    "Enable fullscreen mode" \
        "-e, edit"          "Edit the profiles config file"

    printf "\n${HL}Other flags:${NC}\n"
    printf "  ${MSG_COL}%-18b${NC} %b\n" \
        "create-image"      "Create new disk image" \
        "format"            "Specify the disk format when creating a new image" \
        "new-profile"       "Add a new profile to $(ColorPath "${config_file}") configuration" \
        "write"             "Write the current arugment values to the configuration" \
        "comment"           "Provide a comment when creating a new profile" \
        "-h, help"          "Show this help message"

    printf "\n${HL}Examples:${NC}\n"
    printf "  %s\n     ${HL}%b${NC}\n" \
        "Start with disk only"          "${script_basename} my_profile" \
        "Boot with Disk + ISO"          "${script_basename} boot my_profile" \
        "Create new image"              "${script_basename} profile=my_profile create-new-image image_name raw 20G" \
        "Create new profile"            "${script_basename} create-profile my_profile iso=/path/to/ISO.iso img=/path/to/disk.img"
    printf '%s\n' ""
}

function load_profile() {
    local profile_name="$1"
    local -n disk_img_=$2
    local -n iso_img_=$3
    local -n disk_format_=$4
    local -n selected_profile=${profile_name}

    if ! declare -p "${profile_name}" 2> /dev/null | grep -q 'declare -a' ; then
        LOG fatal "Profile '${profile_name}' not found."
    fi

    disk_img_="${selected_profile[0]}"
    iso_img_="${selected_profile[1]:="No_ISO"}"
    disk_format_="${disk_img_##*.}"
}

function EditConfigFile() {
    local file="$1"
    ${EDITOR:-vim} "${file}"
}

function ColorPath() {
    echo "$( sed "s@${HOME}@${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}@g" <(printf "%s\n" "${1}") )"
}

function ListProfiles() {
    local config_file="$1"
    local -a available_profiles=""
    [[ -f "${config_file}" ]] || return 1
    LOG info "Available profiles:"
    mapfile -t available_profiles < <(grep -o '^[A-Za-z_]*=(' "${config_file}" | sed 's/=(//')
    for (( i=0; i < ${#available_profiles[@]}; i++ )); do
        printf '   %s. %b\n' "$((i+1))" "${available_profiles[$i]}"
    done
}

function CreateDiskImg() {
    local img="$1"
    local format="$2"
    local size="$3"
    [[ "${img}" == *.* ]] || img="${img}.${format}"
    qemu-img create -f ${format:-"raw"} "${img}" "${size:-"20G"}"
    LOG info "Disk created:"
    printf '    %s %-4s = %s\n' \
        "Disk image:  "  ""  "${img}" \
        "Disk size:   "  ""  "${size:-"20G"}" \
        "Disk format: "  ""  "${format:-"raw"}"
}

function WriteToProfile() {
    local config_file="$1"
    local profile_name="${2:-"default"}"
    local img="${3:-""}"
    local iso="${4:-""}"
    local comment="$5"
    msg="${profile_name^}"
    if [[ -n "${comment}" ]];then
        msg+=": ${comment^}"
    fi

    mapfile -t available_profiles < <(grep -o '^[A-Za-z_]*=(' "${config_file}" | sed 's/=(//')
    for (( i=0; i < ${#available_profiles[@]}; i++ )); do
        if [[ "${profile_name}" == "${available_profiles[$i]}" ]]; then
            return 1
        fi
    done

    [[ -s "${config_file}" ]] || echo '#!/usr/bin/env bash' > "${config_file}"
    cat >> "${config_file}" << EOF

# ${msg}
${profile_name}=(
    # Disk image
    "${img}"

    # ISO file
    "${iso}"
)

EOF
    if [[ $? -eq 0 ]]; then
        LOG info "New profile added: Profile: '${profile_name}'"
    fi
    return 0
}

function print_row() {
    local label="$1"
    local value="$2"
    printf "  %b%-16b%b: %b\n" "$MSG_COL" "$label" "$NC" "$value"
}

# Boot VM with ISO
function boot_VM() {
    local img="$1"
    local iso="$2"
    local format="$3"
    local -i ram=$4
    local -i full_scr=$5
    local profile_in_use="$6"
    local ram_display=""

    local -a qemu_flags_arr=(
        "-m" "${ram}"
        "-cpu" "EPYC-v4"
        "-vga" "qxl"
        "-display" "gtk,gl=on,show-menubar=off,zoom-to-fit=on"
        "-boot" "d"
        "-enable-kvm"
        "-drive" "file="${disk_img// /\\}",media=disk,format="${format}",if=virtio"
        "-drive" "file="${iso// /\\}",media=cdrom"
    )

    [[ $full_scr -eq 1 ]] && qemu_flags_arr+=( "-full-screen" )

    if (( ram >= 1024 )); then
        ram_display="$(awk -v mb="$ram" 'BEGIN { printf "%.2f GB", mb / 1024 }')"
    else
        ram_display="${ram} MB"
    fi

    printf "${HL}Booting VM: Disk + ISO${NC}\n"
    print_row "Profile"         "${profile_in_use}"
    print_row "Disk file"       "${BLUE}${img}${NC}"
    print_row "ISO file"        "${BLUE}${iso}${NC}"
    print_row "Disk format"     "${format}"
    print_row "RAM Allocated"   "${ram_display}"

    qemu-system-x86_64 "${qemu_flags_arr[@]}" & disown
}

# Start VM from disk
function start_VM() {
    local img="$1"
    local format="$2"
    local -i ram=$3
    local -i full_scr=$4
    local profile_in_use="$5"
    local ram_display=""

    local -a qemu_flags_arr=(
        "-m" "${ram}"
        "-cpu" "EPYC-v4"
        "-vga" "qxl"
        "-display" "gtk,gl=on,show-menubar=off"
        "-enable-kvm"
        "-audiodev" "pa,id=devpa"
        "-drive" "file=${img// /\\},media=disk,format=${format},if=virtio"
    )

    [[ $full_scr -eq 1 ]] && qemu_flags_arr+=( "-full-screen" )

    if (( ram >= 1024 )); then
        ram_display="$(awk -v mb="$ram" 'BEGIN { printf "%.2f GB", mb / 1024 }')"
    else
        ram_display="${ram} MB"
    fi

    printf "${HL}Starting VM: Disk only${NC}\n"
    print_row "Profile"         "${profile_in_use}"
    print_row "Disk file"       "${BLUE}${img}${NC}"
    print_row "Disk format"     "${format}"
    print_row "RAM Allocated"   "${ram_display}"

    qemu-system-x86_64 "${qemu_flags_arr[@]}" & disown
}

function main() {
    # Flags
    local -a arg_array=("$@")

    local disk_img="" iso_img="" disk_format=""
    local -a requested_profiles=()
    local -g config_dir="${HOME}/.custom/vmctl"
    local config_file="${config_dir}/profiles" profile_name=""
    local comment="" create_img=""

    local -i boot=0 full_scr=0
    local -i ram="$(( $(awk '/MemTotal/ { print $2 }' /proc/meminfo) / 1640 ))"
    local -i should_create_profile=0 should_create_img=0
    local disk_size=""

    [[ ${#arg_array[@]} -eq 0 ]] && {
        Usage "${config_file}"
        return 0
    }

    mkdir -p "${config_dir}"

    if [[ -s "${config_file}" && -f "${config_file}" ]]; then
        source "${config_file}"
    else
        LOG warn "No profile found. Creating a default"
        if WriteToProfile "${config_file}"; then
            LOG info "New default profile created at '$(ColorPath "${config_file}")'"
        fi
    fi

    # Parse args
    for (( i=0; i < ${#arg_array[@]}; i++ )); do
        arg="${arg_array[$i]}"
        case "${arg}" in
            boot|-*boot)
                boot=1
                ;;
            im*g*=*|-*im*g*=*)
                disk_img="${arg#*=}"
                ;;
            iso*=*|-*iso*=*)
                iso_img="${arg#*=}"
                ;;
            ram=*|-*ram=*)
                ram="${arg#*=}"
                ;;
            im*g*|-*im*g*)
                disk_img="${arg_array[$((i+1))]}"
                ;;
            iso*|-*iso*)
                iso_img="${arg_array[$((i+1))]}"
                ;;
            ram|-*ram)
                ram="${arg_array[$((i+1))]}"
                ;;
            create*im*=*|-*create*im*=*)
                create_img="${arg#*=}"
                if [[ -n "${create_img}" ]]; then
                    should_create_img=1
                else
                    LOG fatal "No image specified"
                fi
                local next_arg="${arg_array[$((i+1))]}"
                case "$next_arg" in
                    raw|qcow2)
                        disk_format="$next_arg"
                        i=$((i+1))
                        ;;
                esac
                if [[ -n "${create_img#*.}" && -z "${disk_format}" ]]; then
                    disk_format="${create_img#*.}"
                else
                    disk_format="${disk_format}"
                fi
                next_arg="${arg_array[$((i+1))]}"
                if [[ "${next_arg}" =~ ^[0-8]+(K|M|G)$ ]]; then
                    disk_size="${next_arg}"
                    i=$((i+1))
                fi
                unset next_arg
                ;;
            create*im*|-*create*im*)
                create_img="${arg_array[$((i+1))]}"
                if [[ -n "${create_img}" ]]; then
                    should_create_img=1
                    i=$((i+1))
                else
                    LOG fatal "No image specified"
                fi
                local next_arg="${arg_array[$((i+1))]}"
                case "${next_arg}" in
                    raw|qcow2)
                        disk_format="${next_arg}"
                        i=$((i+1))
                        ;;
                esac
                if [[ -z "${disk_format}" ]]; then
                    disk_format="${create_img#*.}"
                else
                    disk_format="${disk_format}"
                fi
                next_arg="${arg_array[$((i+1))]}"
                if [[ "${next_arg}" =~ ^[0-8]+(K|M|G)$ ]]; then
                    disk_size="${next_arg}"
                    i=$((i+1))
                fi
                unset next_arg
                ;;
            new*pro=*|create*pro=*|pro*=*|-*create*pro*=*|-*new*pro*=*)
                profile_name="${arg#*=}"
                [[ -z "${profile_name}" ]] && LOG fatal "No profile specified"
                should_create_profile=1
                ;;
            new*pro*|create*pro*|pro*|-*create*pro*|-*new*pro*)
                profile_name="${arg_array[$((i+1))]}"
                [[ -z "${profile_name}" ]] && LOG fatal "No profile specified"
                should_create_profile=1
                i=$((i+1))
                ;;
            comm*)
                comment="${arg}"
                ;;
            comm*=*)
                comment="${arg_array[$((i+1))]}"
                ;;
            for*)
                disk_format="${arg_array[$((i+1))]}"
                ;;
            pro*=*|-*pro*=*)
                profile_name="${arg#*=}"
                ;;
            pro*|-*pro*)
                profile_name="${arg_array[$((i+1))]}"
                i=$((i+1))
                ;;
            f|-f|-*full*|*full*)
                full_scr=1
                ;;
            -*l|list*|-*list*)
                ListProfiles "${config_file}"
                return 0
                ;;
            edit|-*edit)
                EditConfigFile "${config_file}"
                return 0
                ;;
            h|-h|-*help|help)
                Usage "${config_file}"
                return 0
                ;;
            [A-Za-z_]*)
                if declare -p "${arg}" 2> /dev/null | grep -q 'declare -a'; then
                    requested_profiles+=("${arg}")
                else
                    LOG fatal "'${arg}' Not a valid profile"
                fi
                ;;
            *)
                LOG warn "Unknown argument: '${arg}'"
                Usage "${config_file}"
                return 1
                ;;
        esac
    done

    if [[ -n "${profile_name}" ]]; then
        requested_profiles+=("${profile_name}")
    fi

    if [[ $should_create_img -eq 1 ]]; then
        [[ -z "${profile_name}" ]] && LOG fatal "No profile name specified"
        [[ -z "${create_img}" ]] && LOG fatal "No disk image specified"
        [[ -z "${disk_format}" ]] &&  LOG fatal "No disk format specified"
        [[ -z "${disk_size}" || "${disk_size}" == "0" ]] && LOG fatal "No image size specified"
        mkdir -p "${config_dir}/${profile_name}"
        CreateDiskImg "${config_dir}/${profile_name}/${create_img}" "${disk_format}" "${disk_size}"
        [[ $? -eq 0 ]] && return 0 || return 1
    fi

    if [[ $should_create_profile -eq 1 ]]; then
        local temp_iso_img="" temp_create_img=""
        if [[ -z "${iso_img}" ]]; then
            LOG warn "No ISO image is given"
            temp_iso_img=""
        elif [[ "${iso_img}" != */* ]]; then
            temp_iso_img="${config_dir}/${profile_name}/${iso_img}"
        else
            temp_iso_img="${iso_img}"
        fi

        if [[ -z "${disk_img}" ]]; then
            LOG fatal "No disk image is given"
        elif [[ "${disk_img}" != */* ]]; then
            temp_iso_img="${config_dir}/${profile_name}/${disk_img}"
        else
            temp_iso_img="${iso_img}"
        fi

        if [[ "${config_dir}/${profile_name}/${create_img}" ]]; then
            temp_create_img="${config_dir}/${profile_name}/${create_img}"
        fi

        WriteToProfile "${config_file}" "${profile_name}" "${disk_img:-"${temp_create_img}"}" "${iso_img:-"${temp_iso_img}"}" "${comment}" || \
            LOG warn "'${profile_name}' already exists"
        [[ $? -eq 0 ]] && return 0 || return 1
    fi

    if [[ ${#requested_profiles[@]} -eq 0 ]]; then
        [[ -n "${profile_name}" ]] || LOG fatal "No profile name was given"
    fi

    source "${config_file}"

    for req_profile in "${requested_profiles[@]}"; do

        [[ -z "${disk_format}" ]] && disk_format="${iso_img#*.}"

        [[ -n ${iso_img} ]] && boot=1

        if [[ -z "${disk_img}" || -z "${iso_img}" || -z "${disk_format}" ]]; then
            load_profile "${req_profile}" disk_img iso_img disk_format
        fi

        # Path checks for disk image
        if [[ -z "${disk_img}" ]]; then
            LOG fatal "No disk image given"
        elif [[ ! -s "${disk_img}" || ! -f "${disk_img}" ]]; then
            LOG fatal "Disk image '${BLUE}${disk_img}${NC}' does not exist; Update it\n"
        fi

        if [[ $boot -eq 1 ]]; then
            # Path checks for iso image
            if [[ -z "${iso_img}" ]]; then
                LOG fatal "No ISO image given"
            elif [[ ! -s "${iso_img}" || ! -f "${iso_img}" ]]; then
                LOG fatal "ISO '${BLUE}${iso_img}${NC}' does not exist"
            fi
        fi

        # Entry logic
        if [[ $boot -eq 1 ]]; then
            boot_VM "${disk_img}" "${iso_img}" "${disk_format}" $ram $full_scr "${req_profile}"
        else
            start_VM "${disk_img}" "${disk_format}" $ram $full_scr "${req_profile}"
        fi
    done
}

main "$@"

