#!/usr/bin/env bash

IMAGE_NAME=""

ARGS=("$@")

VOLUME_NAME=""
BIND_PORT=""
NO_IMAGE=1
NO_VOLUME=1

RED="\033[38;2;244;0;0m"
GREEN="\033[38;2;0;244;0m"
ORANGE="\033[38;2;255;184;64m"
BLUE="\033[38;2;98;192;244m"
NC="\033[0m"

function LOG() {
    local _type="$1"
    shift
    case "$_type" in
        info) echo -e "[${GREEN}*${NC}]: $1" ;;
        warn) echo -e "[${ORANGE}?${NC}]: $1" ;;
        error) echo -e "[${RED}!${NC}]: $1" ; exit 1; ;;
    esac
}

function StopDocker() {
    if systemctl --quiet is-active docker; then
        LOG info "Stopping docker services"
        sudo systemctl --quiet stop docker.service docker.socket
        LOG info "Services stopped"
    else
        LOG info "Docker services are already stopped"
    fi
}

function StartDocker() {
    if ! systemctl --quiet is-active docker; then
        LOG info "Starting docker services"
        sudo systemctl --quiet start docker
        LOG info "Services started"
    fi
}

function ExecIntoContainer() {
   docker exec -it "$CONTAINER_NAME" bash -c \
    '
        cd ~
        if command -v zsh &> /dev/null; then
            exec zsh
        else
            exec bash
        fi
    '
}

# function CapitalizeFirst() {
    # echo "$(tr 'a-z' 'A-Z' <<< ${1:0:1})${1:1}"
    # Use ${Var^}
# }

function CreateContainer() {
    [[ "${CONTAINER_NAME}" == "ollama" ]] && BIND_PORT="11434:11434"

    docker run --gpus all -dt \
    -v "${VOLUME_NAME}":"${HOME}/.docker_volume" \
    -p "$BIND_PORT" \
    --name "${CONTAINER_NAME}" \
    --hostname "${CONTAINER_NAME^}" \
    "${IMAGE_NAME}"
}

function Usage() {
    printf "%b\n" \
        "${GREEN}Docker - Manage Docker containers with convenience${NC}" \
        "" \
        "Usage:" \
        "  $(basename "$0") *-[OPTIONS] CONTAINER_NAME" \
        "" \
        "Options:" \
        "  --start               Start Docker services" \
        "  --stop                Stop Docker services" \
        "  -img, --img, --image  Specify Docker image name" \
        "  -vol, --vol, --volume Specify Docker volume name" \
        "  -h, --help            Show this help message and exit" \
        "" \
        "Description:" \
        "  This script helps manage Docker containers by starting/stopping Docker," \
        "  pulling images, creating volumes, and attaching to containers." \
        "" \
        "Example:" \
        "  $(basename "$0") --start" \
        "  $(basename "$0") -img=ubuntu -vol=mydata mycontainer" \
        "" \
        "If no image or volume is specified, CONTAINER_NAME will be used as the default." \
        ""
}

for (( i=0 ; i < ${#ARGS[@]}; i++ )); do
    arg="${ARGS[$i]}"
    case "${arg}" in
        --stop)
            StopDocker || LOG error "Cannot stop Docker services"
            ;;
        --start)
            StartDocker || LOG info "Docker services are already stopped"
            ;;
        --ls|--list|--avail|--available)
            IFS=$'\n'
            printf '%b%-24s%b          %b%s%b\n' "\033[38;2;101;191;213m" "Availale Containers" "\033[0m" "\033[38;2;114;186;36m" "Ports" "\033[0m"
            printf '%-24s =>       %s\n' $(docker ps --format json --all | jq -r '{Name: .Names}, {Ports: .Ports}' | jq '.[]')
            ;;
        -img=*|--img=*|--image=*)
            IMAGE_NAME="${arg#*=}"
            NO_IMAGE=0
            ;;
        -img|--img|--image)
            IMAGE_NAME="${ARGS[$((i+1))]}"
            NO_IMAGE=0
            i=$((i+1))
            ;;
        -vol=*|--vol=*|--volume=*)
            VOLUME_NAME="${arg#*=}"
            NO_VOLUME=0
            ;;
        -vol|--vol|--volume)
            VOLUME_NAME="${ARGS[$((i+1))]}"
            NO_VOLUME=0
            i=$((i+1))
            ;;
        -h|--help)
            Usage
            exit 0
        ;;
        *)
            if [[ -z "$CONTAINER_NAME" ]]; then
                CONTAINER_NAME="${arg:-"NO_CONTAINER-"}"
            else
                LOG warn "Multiple container names specified, ignoring: $arg"
            fi
            ;;
    esac
done

[[ "$CONTAINER_NAME" =~ ^(NO_CONTAINER-)$ || -z "$CONTAINER_NAME" ]] && exit 0

# Validate input
[[ $VOLUME_NAME -eq 1 ]] && VOLUME_NAME="$CONTAINER_NAME"
[[ $NO_IMAGE -eq 1 ]] && IMAGE_NAME="$CONTAINER_NAME"

# Start docker if not active
StartDocker

# Ensure volume exists
if [[ $NO_VOLUME -eq 0 ]]; then
    if ! docker volume inspect "${VOLUME_NAME}" &> /dev/null; then
        LOG info "Creating volume ${VOLUME_NAME}"
        docker volume create "${VOLUME_NAME}"
    fi
fi

# Ensure image is available
if [[ $NO_IMAGE -eq 0 ]]; then
    if ! docker image inspect "${IMAGE_NAME}" &> /dev/null; then
        LOG info "Pulling image ${IMAGE_NAME}"
        docker pull "${IMAGE_NAME}"
    fi
fi

# Check if container exists or not
if ! docker inspect "$CONTAINER_NAME" &> /dev/null; then
    LOG error "Container ${BLUE}${CONTAINER_NAME}${NC} not found."
fi

# Check if container is running
if docker ps --filter "name=^/${CONTAINER_NAME}$" --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
    LOG info "Attaching to container ${BLUE}${CONTAINER_NAME}${NC}"
    ExecIntoContainer
else
    # Try to start existing container, else create a new one
    if docker start "$CONTAINER_NAME" &>/dev/null; then
        LOG info "Attaching to container ${BLUE}${CONTAINER_NAME}${NC}"
        ExecIntoContainer
    else
        LOG info "Creating new container instance of ${BLUE}${CONTAINER_NAME}${NC}"
        CreateContainer || LOG error "Failed to create container from image ${IMAGE_NAME}"
    fi
fi

