#!/usr/bin/env bash

# set -euo pipefail

IFS=$'\n'
RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;161;239;116m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
MUDDY="\033[38;2;195;158;151m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

declare -a  mpv_flags=()
declare -a SELECTED=() CURRENTLY_PLAYING=()

MUSIC_DIR="${HOME}/Music"
QUIET=""
MPV_PID=0

readonly MPV_SOCKET_DIR="/tmp/mpv_playing"
readonly SOCKET="mpv_socket-$RANDOM"
readonly MPV_SOCKET="${MPV_SOCKET_DIR}/$SOCKET"
readonly MPV_LOG="${MPV_SOCKET_DIR}/mpv_log.log"
readonly MUSIC_DIRECTORY="$( sed "s|/home/$(getent passwd | grep $UID | cut -d: -f1)|${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}|g" <(echo ${HOME}/Music) )"

# function cleanup() {
#     echo '{"text": "", "class": "inactive"}"' | socat - UNIX-CONNECT:${MPV_SOCKET}
# }

trap 'Exit 0' SIGINT SIGQUIT
trap 'Exit 1' SIGTERM

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            [[ -z "${QUIET}" ]] && { printf "[%b*%b]: " "${GREEN}" "${NC}"; printf "%b""$*\n"; }
            ;;
        command_)
            [[ -z "${QUIET}" ]] && { printf "[%b*%b]: " "${GREEN}" "${NC}"; printf "%b " "$@\b\n"; }
            ;;
        warn)
            echo -e "[${WARN}^${NC}]: $@"
            ;;
        error)
            echo -e "[${RED}!${NC}]: $@"
            ;;
    esac
}

function Exit() {
    [[ -n $LOGGER_PID ]] && kill $LOGGER_PID 2> /dev/null
    rm -f "${MPV_SOCKET}" "$MPV_LOG"
    rmdir ${MPV_SOCKET_DIR} &> /dev/null
    printf "\nExiting...\n"
    exit $1
}

function CheckDependencies() {
    local -a deps=(mpv fzf jq ncat)
    local -a missing=()

    for cmd in "${deps[@]}"; do
        if ! command -v "${cmd}" &> /dev/null; then
            missing+=("${cmd}")
        fi
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        LOG error "Missing dependencies:"
        for dep in "${missing[@]}"; do
            echo -e "  - ${RED}${dep}${NC}"
        done
        echo -e "${WARN}Please install the missing dependencies and try again.${NC}"
        Exit 1
    fi
}

function Usage() {
    printf "%b\n" \
        "" \
        " ${MUDDY}Usage:${NC} PlayMusic [OPTIONS]" \
        "" \
        " ${MUDDY}Options:${NC}" \
        "   -vid, --video           Enable video output (default: no)" \
        "   -vol=N, --volume=N      Set volume (default: 65)" \
        "   -q, --quiet             Suppress MPV output" \
        "   -s, --shuffle           Shuffle selected tracks (only with --loop)" \
        "" \
        " ${MUDDY}Behavior:${NC}" \
        "   ðŸ”¹ Uses ${BLUE}fzf${NC} to pick music from '${LIGHT_SKIN}${MUSIC_DIRECTORY}${NC}'" \
        "   ðŸ”¹ Supports all major audio formats" \
        "   ðŸ”¹ Applies optimized mpv flags (hardware decoding, mpris, hdr, etc.)" \
        "" \
        " ${MUDDY}Examples:${NC}" \
        "   PlayMusic                   # Launch, pick music, play (loop-playlist)" \
        "   PlayMusic --shuffle         # Random shuffle" \
        "   PlayMusic --vol=45          # Set volume to 45" \
        "" \
        " ${BROWN}Note:${NC} Shuffle does nothing without multiple files & --loop." \
        ""
}

function IPC_() {
    local data="$1"
    shift
    local -a args=("$@") arr=()

    for (( i=0; i < ${#args[@]}; i++ )); do
        arr+=("${args[$i]}")
        if (( i < ${#args[@]} - 1 )); then
            arr+=(', ')
        fi
    done
    if [[ -S "${MPV_SOCKET}" ]] && pgrep -x mpv | grep -q -o $MPV_PID; then
        echo "{ \"command\": [ ${arr[@]} ] }" | ncat -U "${MPV_SOCKET}" | jq -r ".$data" 2> /dev/null
    else
        Exit 1
    fi
}

function BackgroundStatusLogger() {
    local title= pos= dur= prev_title= prev_pos=
    printf "\n"
    while pgrep -x mpv | grep -q -o $MPV_PID; do
        if [[ -S "${MPV_SOCKET}" ]]; then
            title=$(IPC_ 'data' '"get_property"' '"media-title"') &> /dev/null
            pos=$(IPC_ 'data' '"get_property"' '"time-pos"' | awk '{printf "%d:%02d", int($1/60), int($1%60)}') &> /dev/null
            dur=$(IPC_ 'data' '"get_property"' '"duration"' | awk '{printf "%d:%02d", int($1/60), int($1%60)}') &> /dev/null
        fi
        [[ "$title" != "$prev_title" || "$pos" != "$prev_pos" ]] && {
            printf "\r\033[2K[${BLUE}*${NC}]: Playing: '${GREEN}%s${NC}' | %s / %s" "${title}" "$pos" "$dur"
            prev_title="$title"
            prev_pos=$pos
        }
        sleep 0.5
    done
}

function Quit() {
    while IFS= read -r KEY; do
        if [[ $KEY =~ ^(q|Q)$ ]]; then
            Exit 0
        fi
    done
}

function HandleIpcControl() {
    local togglePlay="false"
    while pgrep -x mpv | grep -q -o $MPV_PID; do
        IFS= read -rsn1 KEY
        case "${KEY}" in
            [qQ]) IPC_ 'error' '"quit"' &> /dev/null ; Exit 0 ;;
            s) IPC_ 'error' '"cycle"' '"shuffle"' &> /dev/null ;;
            r) IPC_ 'error' '"cycle"' '"loop-playlist"' &> /dev/null ;;
            f) IPC_ 'error' '"cycle"' '"fullscreen"' &> /dev/null ;;
            l) IPC_ 'error' '"seek"' 5 &> /dev/null ;;
            j) IPC_ 'error' '"seek"' -5 &> /dev/null ;;
            L) IPC_ 'error' '"seek"' 20 &> /dev/null ;;
            J) IPC_ 'error' '"seek"' -20 &> /dev/null ;;
            +|0) IPC_ 'error' '"add"' '"volume"' 5 &> /dev/null ;;
            -|9) IPC_ 'error' '"add"' '"volume"' -5 &> /dev/null ;;
            n|N|'>') IPC_ 'error' '"playlist-next"' &> /dev/null ;;
            p|P|'<') IPC_ 'error' '"playlist-prev"' &> /dev/null ;;
            $'\x20'|k)
                [[ $togglePlay == false ]] && togglePlay=true || togglePlay=false
                IPC_ 'error' '"set_property"' '"pause"' $togglePlay &> /dev/null
                ;;
            $'') # Enter key
                LOG info "Enter"
                ;;
            $'\x1b')
                while IFS= read -rsn1 -t 0.0006 key; do
                    KEY+="$key"
                done
                [[ ${KEY} == $'\x1b[A' ]] && IPC_ 'error' '"add"' '"volume"' 5 &> /dev/null
                [[ ${KEY} == $'\x1b[B' ]] && IPC_ 'error' '"add"' '"volume"' -5 &> /dev/null
                [[ ${KEY} == $'\x1b[C' ]] && IPC_ 'error' '"seek"' 5 &> /dev/null
                [[ ${KEY} == $'\x1b[D' ]] && IPC_ 'error' '"seek"' -5 &> /dev/null
                ;;
        esac
    done
}

function TurnMusicOn() {
    local -a files_joined=("$@")
    local -a quoted_files=()
    local file=""
    local track_num=0

    mkdir -p "${MPV_SOCKET_DIR}"


    if [[ $mpv_ -eq 1 ]]; then
        for f in "${files_joined[@]}"; do
            CURRENTLY_PLAYING="$(basename "${MUSIC_DIRECTORY}/${f}")"
            mpv ${mpv_flags[@]} "${files_joined[@]/#/${MUSIC_DIR}/}"
        done
    elif [[ $loop -eq 1 ]]; then
        LOG info "${BLUE}Tracks${NC}:"
        for (( i=0; i < ${#files_joined[@]}; i++)); do
            track_num=$((i+1))
            file="${files_joined[$i]}"
            quoted_files+=("'${BLUE}${MUSIC_DIRECTORY}${NC}/${LIGHT_SKIN}${file}${NC}'")
            CURRENTLY_PLAYING+=("$(basename "${MUSIC_DIRECTORY}/${file}")")
            LOG info "  ${GREY}$track_num${NC} ${LIGHT_SKIN}${CURRENTLY_PLAYING[$i]%.*}${NC}"
        done

        printf "\n"
        LOG command_ "${GREY}COMMAND${NC}: ${BROWN}mpv${NC}" "${mpv_flags[@]}" "${quoted_files[@]}"
        mpv "${mpv_flags[@]}" "${files_joined[@]/#/${MUSIC_DIR}/}" &> "${MPV_SOCKET_DIR}/mpv_log.log" & disown
        MPV_PID=$!
        if [[ $? -eq 0 ]]; then
            BackgroundStatusLogger &
            LOGGER_PID=$!
            HandleIpcControl
        fi
    else
        for f in "${files_joined[@]}"; do
            CURRENTLY_PLAYING="$(basename "${MUSIC_DIRECTORY}/${f}")"
            LOG info "${GREY}MUSIC${NC}: ${GREEN}${CURRENTLY_PLAYING%.*}${NC}"
            LOG command_ "${GREY}COMMAND${NC}: ${BROWN}mpv${NC} ${mpv_flags[@]} '${LIGHT_SKIN}${MUSIC_DIRECTORY}/${f}${NC}'\n"
            # echo "{\"text\": \"ðŸŽµ ${CURRENTLY_PLAYING%.*}\", \"class\":\"active\"}" | socat - UNIX-CONNECT:${MPV_SOCKET}
            mpv ${mpv_flags[@]} "${MUSIC_DIR}/${f}"
        done
    fi
}

function Play() {
    local -a music_files=()
    for file in "${SELECTED[@]}"; do
        if [[ -f "${MUSIC_DIR}/${file}" ]]; then
            music_files+=("${file}")
        else
            LOG error "No such Music file: '${LIGHT_SKIN}${file}${NC}'"
        fi
    done
    TurnMusicOn "${music_files[@]}"
}

function main() {
    local -a ARG_ARR=("$@")
    local arg=
    local volume=
    local video=
    local -g loop=0 mpv_=0
    local shuffle=0

    CheckDependencies

    for (( i=0 ; i < ${#ARG_ARR[@]} ; i++ )); do
        arg="${ARG_ARR[$i]}"
        case "${arg}" in
            vid|--vid|--video|video)
                video="auto"
                ;;
            vol|--vol--volume|volume)
                volume=${ARG_ARR[ $((i+1)) ]}
                [[ -z ${volume} || ${volume} == -* ]] && {
                    LOG error "No argument give after ${GREY}--volume${NC}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                    volume=65
                }
                i=$((i+1))
                ;;
            vol=*|--vol=*|--volume=*|volume=*)
                if [[ "${arg#*=}" =~ ^[0-9]+$ ]]; then
                    volume=$(awk -F'=' '{print $2}' <<< "${arg}")
                else
                    LOG error "Invalid volume: ${arg}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                fi
                ;;
            -q|--quiet)
                QUIET="--really-quiet"
                ;;
            -m|--mpv|mpv)
                mpv_=1
                ;;
            -s|--shuff|shuff|--shuffle|shuffle)
                shuffle=1
                ;;
            -h|--help|help)
                Usage
                Exit 0
                ;;
        esac
    done

    [[ -d "${MUSIC_DIR}" ]] || {
        LOG error "Music directory not found: '${BLUE}${MUSIC_DIR}${NC}'"
        Exit 1
    }

    mapfile -t SELECTED < <(find "${MUSIC_DIR}" \( -type f -iregex '.*\.\(mp3\|flac\|m4a\|wav\|aac\|ogg\|opus\|wma\|alac\|ape\|mpc\|wavpack\|webm\)' \) -printf "%P\n" | fzf --multi)

    if [[ ${#SELECTED[@]} -eq 0 ]]; then
        LOG info "No song selected"
        Exit 1
    elif [[ ${#SELECTED[@]} -gt 1 ]]; then
        loop=1
    fi

    [[ $shuffle -eq 1 && $loop -eq 0 ]] && LOG warn "Shuffle can only be used with mutiple tracks"
    [[ $shuffle -eq 1 ]] && SELECTED=($(printf "%s\n" "${SELECTED[@]}" | shuf))

    mpv_flags+=(
        "--vid=${video:-"no"}"
        "--volume=${volume:-65}"
    )

    mpv_flags+=(
        "--osc=no"
        "--script-opts=mpris=yes"
    )

    if  [[ $mpv_ -eq 1 ]]; then
        mpv_flags+=(
            "--vo=tct"
            "--vid=auto"
            "--image-display-duration=inf"
            "--really-quiet"
        )
    else
        mpv_flags+=(
            "--vo=gpu-next"
        )
    fi
    mpv_flags+=(
        "--hwdec=vulkan"
        "--hdr-compute-peak"
        "--loop-playlist=inf"
        "--msg-level=ffmpeg/demuxer=error"
    )

    if [[ $loop -eq 1 && $mpv_ -eq 0 ]]; then
        mpv_flags+=(
            "--input-ipc-server=${MPV_SOCKET}"
        )
    fi

    [[ -n "${QUIET}" ]] && mpv_flags+=("${QUIET}")

    ### Play music
    Play
}

main "$@"
Exit 0

