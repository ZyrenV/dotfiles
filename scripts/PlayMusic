#!/usr/bin/env bash

# set -euo pipefail

IFS=$'\n'
RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;161;239;116m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
MUDDY="\033[38;2;195;158;151m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

declare -a  mpv_flags=()
declare -a SELECTED=() CURRENTLY_PLAYING=()

QUIET=0
MPV_PID=0

readonly MPV_SOCKET_DIR="/tmp/mpv_playing"
readonly SOCKET="mpv_socket-$RANDOM"
readonly MPV_SOCKET="${MPV_SOCKET_DIR}/$SOCKET"
readonly MPV_LOG="${MPV_SOCKET_DIR}/mpv_log.log"
MUSIC_DIR="${HOME}/Music"

# function cleanup() {
#     echo '{"text": "", "class": "inactive"}"' | socat - UNIX-CONNECT:${MPV_SOCKET}
# }

trap 'Exit 0' SIGINT SIGQUIT
trap 'Exit 1' SIGTERM

function LOG() {
    local type_="$1"
    shift
    case "${type_}" in
        info)
            [[ "${QUIET}" -eq 0 ]] && { printf "[%b*%b]: " "${GREEN}" "${NC}"; printf "%b""$*\n"; }
            ;;
        command_)
            [[ "${QUIET}" -eq 0 ]] && { printf "[%b*%b]: " "${GREEN}" "${NC}"; printf "%b " "$@\b\n"; }
            ;;
        warn)
            printf '[%b%s%b]' "${WARN}" "^" "${NC}" "$*"
            ;;
        error)
            printf '[%b%s%b]' "${RED}" "!" "${NC}" "$*"
            ;;
    esac
}

function ColorPath() {
    sed "s@${HOME}@${BLUE//\\/\\\\}\${HOME}${NC//\\/\\\\}@g" <(printf '%s\n' "$1")
}

function Exit() {
    if [[ $1 =~ ^[0-9]+$ || -z $1 ]]; then
        exit ${1:-0}
    else
        printf "%s\n\n" "$1"
        exit ${2:-0}
    fi
}

function CheckDependencies() {
    local -a deps=(mpv fzf jq ncat)
    local -a missing=()

    for cmd in "${deps[@]}"; do
        if ! command -v "${cmd}" &> /dev/null; then
            missing+=("${cmd}")
        fi
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        LOG error "Missing dependencies:"
        for dep in "${missing[@]}"; do
            echo -e "  - ${RED}${dep}${NC}"
        done
        echo -e "${WARN}Please install the missing dependencies and try again.${NC}"
        Exit "Exiting..." 1
    fi
}

function Usage() {
    printf "%b\n" \
        "" \
        " ${MUDDY}Usage:${NC} PlayMusic [OPTIONS]" \
        "" \
        " ${MUDDY}Options:${NC}" \
        "   -vid, --video           Enable video output (default: no)" \
        "   -vol=N, --volume=N      Set volume (default: 65)" \
        "   -q, --quiet             Suppress MPV output" \
        "   -s, --shuffle           Shuffle selected tracks (only with --loop)" \
        "" \
        " ${MUDDY}Behavior:${NC}" \
        "   ðŸ”¹ Uses ${BLUE}fzf${NC} to pick music from '${LIGHT_SKIN}$(ColorPath "${MUSIC_DIR}")${NC}'" \
        "   ðŸ”¹ Supports all major audio formats" \
        "   ðŸ”¹ Applies optimized mpv flags (hardware decoding, mpris, hdr, etc.)" \
        "" \
        " ${MUDDY}Examples:${NC}" \
        "   PlayMusic                   # Launch, pick music, play (loop-playlist)" \
        "   PlayMusic --shuffle         # Random shuffle" \
        "   PlayMusic --vol=45          # Set volume to 45" \
        "" \
        " ${BROWN}Note:${NC} Shuffle does nothing without multiple files & --loop." \
        ""
}

function TurnMusicOn() {
    local -a files_joined=("$@")
    local -a quoted_files=()
    local file=""
    local track_num=0

    mkdir -p "${MPV_SOCKET_DIR}"

    if [[ $mpv_ -eq 1 ]]; then
        CURRENTLY_PLAYING="$(basename "${MUSIC_DIR}/${f}")"
        mpv ${mpv_flags[@]} "${files_joined[@]/#/${MUSIC_DIR}/}"
    else
        LOG info "${BLUE}Tracks${NC}:"
        for (( i=0; i < ${#files_joined[@]}; i++)); do
            track_num=$((i+1))
            file="${files_joined[$i]}"
            quoted_files+=("'${BLUE}${MUSIC_DIR}${NC}/${LIGHT_SKIN}${file}${NC}'")
            CURRENTLY_PLAYING+=("$(basename "${MUSIC_DIR}/${file}")")
            LOG info "  ${GREY}$track_num${NC} ${LIGHT_SKIN}${CURRENTLY_PLAYING[$i]%.*}${NC}"
        done
        printf '\n'
        LOG command_ "${GREY}COMMAND${NC}: ${BROWN}mpv${NC}" "${mpv_flags[@]}" "${quoted_files[@]}"
        mpv "${mpv_flags[@]}" "${files_joined[@]/#/${MUSIC_DIR}/}"
        printf '\n'
    fi
}

function Play() {
    local -a music_files=()
    for file in "${SELECTED[@]}"; do
        if [[ -f "${MUSIC_DIR}/${file}" ]]; then
            music_files+=("${file}")
        else
            LOG error "No such Music file: '${LIGHT_SKIN}${file}${NC}'"
        fi
    done
    TurnMusicOn "${music_files[@]}"
}

function main() {
    local -a ARG_ARR=("$@")
    local arg=
    local volume=
    local video=
    local -g loop=0 mpv_=0
    local shuffle=0

    CheckDependencies

    for (( i=0 ; i < ${#ARG_ARR[@]} ; i++ )); do
        arg="${ARG_ARR[$i]}"
        case "${arg}" in
            vid|--vid|--video|video)
                video="auto"
                ;;
            vol|--vol--volume|volume)
                volume=${ARG_ARR[ $((i+1)) ]}
                [[ -z ${volume} || ${volume} == -* ]] && {
                    LOG error "No argument give after ${GREY}--volume${NC}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                    volume=65
                }
                i=$((i+1))
                ;;
            vol=*|--vol=*|--volume=*|volume=*)
                if [[ "${arg#*=}" =~ ^[0-9]+$ ]]; then
                    volume=$(awk -F'=' '{print $2}' <<< "${arg}")
                else
                    LOG error "Invalid volume: ${arg}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                fi
                ;;
            -q|--quiet)
                QUIET=1
                ;;
            -m|--mpv|mpv)
                mpv_=1
                ;;
            -s|--shuff|shuff|--shuffle|shuffle)
                shuffle=1
                ;;
            -h|--help|help)
                Usage
                Exit 0
                ;;
            *)
                if [[ -d "${arg}" ]];then
                    MUSIC_DIR="${arg}"
                else
                Usage
                Exit 0
                fi
                ;;
        esac
    done

    [[ -d "${MUSIC_DIR}" ]] || {
        LOG error "Music directory not found: '${BLUE}${MUSIC_DIR}${NC}'"
        Exit 1
    }

    mapfile -t SELECTED < <(find "${MUSIC_DIR}" \( -type f -iregex '.*\.\(mp3\|flac\|m4a\|wav\|aac\|ogg\|opus\|wma\|alac\|ape\|mpc\|wavpack\|webm\)' \) -printf "%P\n" | fzf --multi)

    if [[ ${#SELECTED[@]} -eq 0 ]]; then
        LOG info "No song selected"
        Exit 1
    elif [[ ${#SELECTED[@]} -gt 1 ]]; then
        loop=1
    fi

    [[ $shuffle -eq 1 && $loop -eq 0 ]] && LOG warn "Shuffle can only be used with mutiple tracks"
    [[ $shuffle -eq 1 ]] && SELECTED=($(printf "%s\n" "${SELECTED[@]}" | shuf))

    mpv_flags+=(
        "--vid=${video:-"no"}"
        "--volume=${volume:-64}"
    )

    mpv_flags+=(
        "--osc=no"
        "--script-opts=mpris=yes"
    )

    if  [[ $mpv_ -eq 1 ]]; then
        mpv_flags+=(
            "--vo=tct"
            "--vid=auto"
            "--really-quiet"
        )
    else
        mpv_flags+=(
            "--vo=gpu-next"
        )
    fi
    mpv_flags+=(
        "--hwdec=vulkan"
        "--hdr-compute-peak"
        "--loop-playlist=inf"
        "--quiet"
        "--msg-level=ffmpeg/demuxer=error"
    )

    [[ "${QUIET}" -eq 1 ]] && mpv_flags+=("--really-quiet")

    ### Play music
    Play
}

main "$@"

